{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, withCtx as _withCtx, createBlock as _createBlock, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"topo_title\",\n  style: {\n    \"width\": \"200px\"\n  }\n}, \"本端接口名称\"), /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"topo_title\",\n  style: {\n    \"width\": \"300px\"\n  }\n}, \"对端设备\"), /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"topo_title\",\n  style: {\n    \"width\": \"200px\"\n  }\n}, \"对端接口名称\")], -1);\nconst _hoisted_2 = {\n  style: {\n    \"display\": \"flex\",\n    \"margin-bottom\": \"10px\"\n  }\n};\nconst _hoisted_3 = {\n  class: \"topo_value\"\n};\nconst _hoisted_4 = {\n  class: \"topo_value\",\n  style: {\n    \"width\": \"280px\"\n  }\n};\nconst _hoisted_5 = {\n  style: {\n    \"float\": \"left\"\n  }\n};\nconst _hoisted_6 = {\n  style: {\n    \"float\": \"right\",\n    \"color\": \"var(--el-text-color-secondary)\",\n    \"font-size\": \"11px\"\n  }\n};\nconst _hoisted_7 = {\n  class: \"topo_value\"\n};\nconst _hoisted_8 = {\n  style: {\n    \"margin-top\": \"15px\"\n  }\n};\nconst _hoisted_9 = {\n  style: {\n    \"float\": \"right\",\n    \"margin-bottom\": \"40px\",\n    \"margin-right\": \"72px\",\n    \"margin-top\": \"20px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_dialog, {\n    modelValue: $setup.config.centerDialogVisible,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.config.centerDialogVisible = $event),\n    title: \"编辑网络设备接线信息\",\n    width: \"50%\",\n    \"align-center\": \"\",\n    \"close-on-click-modal\": false\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.config.input_block, (item, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        class: \"topo_block\"\n      }, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_input, {\n        modelValue: item.src_interface_name,\n        \"onUpdate:modelValue\": $event => item.src_interface_name = $event,\n        autosize: \"\",\n        minlength: \"1\",\n        clearable: \"\",\n        class: \"inputflex\",\n        placeholder: \"请输入本端接口名称\"\n      }, null, 8, [\"modelValue\", \"onUpdate:modelValue\"])]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_select, {\n        modelValue: item.target_netdevice_id,\n        \"onUpdate:modelValue\": $event => item.target_netdevice_id = $event,\n        \"value-key\": \"id\",\n        placeholder: \"请选择对端网络设备\"\n      }, {\n        default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.networks.networks_arr, networks_item => {\n          return _openBlock(), _createBlock(_component_el_option, {\n            key: networks_item.id,\n            label: networks_item.host_name,\n            value: networks_item.id\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"span\", _hoisted_5, _toDisplayString(networks_item.host_name), 1), _createElementVNode(\"span\", _hoisted_6, _toDisplayString(networks_item.product_name), 1)]),\n            _: 2\n          }, 1032, [\"label\", \"value\"]);\n        }), 128))]),\n        _: 2\n      }, 1032, [\"modelValue\", \"onUpdate:modelValue\"])]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_input, {\n        modelValue: item.target_interface_name,\n        \"onUpdate:modelValue\": $event => item.target_interface_name = $event,\n        autosize: \"\",\n        clearable: \"\",\n        class: \"inputflex\",\n        placeholder: \"请输入对端接口名称\"\n      }, null, 8, [\"modelValue\", \"onUpdate:modelValue\"])]), _createElementVNode(\"div\", null, [_createVNode(_component_el_button, {\n        onClick: $event => $setup.deleteContent(index),\n        size: \"small\",\n        style: {\n          \"margin-top\": \"3px\"\n        }\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"删除\")]),\n        _: 2\n      }, 1032, [\"onClick\"])])])]);\n    }), 128)), _createElementVNode(\"div\", _hoisted_8, [_createVNode(_component_el_button, {\n      onClick: $setup.addContent\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"添加\")]),\n      _: 1\n    }, 8, [\"onClick\"])]), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_el_button, {\n      onClick: _cache[0] || (_cache[0] = $event => $setup.config.centerDialogVisible = false)\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"取消\")]),\n      _: 1\n    }), _createVNode(_component_el_button, {\n      type: \"primary\",\n      loading: $setup.config.isLoading,\n      onClick: $setup.updateInterfaceTopo\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"确认\")]),\n      _: 1\n    }, 8, [\"loading\", \"onClick\"])])])]),\n    _: 1\n  }, 8, [\"modelValue\"])]);\n}","map":{"version":3,"names":["_createElementVNode","style","class","_createElementBlock","_createVNode","_component_el_dialog","$setup","config","centerDialogVisible","$event","title","width","_Fragment","_renderList","input_block","item","index","key","_hoisted_1","_hoisted_2","_hoisted_3","_component_el_input","src_interface_name","autosize","minlength","clearable","placeholder","_hoisted_4","_component_el_select","target_netdevice_id","networks","networks_arr","networks_item","_createBlock","_component_el_option","id","label","host_name","value","_hoisted_5","_toDisplayString","_hoisted_6","product_name","_hoisted_7","target_interface_name","_component_el_button","onClick","deleteContent","size","_hoisted_8","addContent","_hoisted_9","_cache","type","loading","isLoading","updateInterfaceTopo"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\resource\\networks\\components\\updateinterfacetopo-dialog.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-dialog\r\n            v-model=\"config.centerDialogVisible\"\r\n            title=\"编辑网络设备接线信息\"\r\n            width=\"50%\"\r\n            align-center\r\n            :close-on-click-modal=\"false\"           \r\n        >\r\n\r\n            <div>\r\n                <div  v-for=\"(item,index) in config.input_block\" :key=\"index\" class=\"topo_block\" >\r\n                    <div style=\"display: flex;\">\r\n                        <div class=\"topo_title\" style=\"width: 200px;\">本端接口名称</div>\r\n                        <div class=\"topo_title\" style=\"width: 300px;\">对端设备</div>\r\n                        <div class=\"topo_title\" style=\"width: 200px;\">对端接口名称</div>\r\n                    </div>\r\n                    <div style=\"display: flex; margin-bottom: 10px;\">\r\n                        <div class=\"topo_value\">\r\n                            <el-input v-model=\"item.src_interface_name\" autosize minlength=1 clearable class=\"inputflex\"  placeholder=\"请输入本端接口名称\"  />\r\n                        </div>\r\n                        <div class=\"topo_value\" style=\"width: 280px;\">\r\n                            <el-select v-model=\"item.target_netdevice_id\" value-key=\"id\" placeholder=\"请选择对端网络设备\">\r\n                                <el-option\r\n                                    v-for=\"networks_item in networks.networks_arr\"\r\n                                    :key=\"networks_item.id\"\r\n                                    :label=\"networks_item.host_name\"\r\n                                    :value=\"networks_item.id\"\r\n                                    >\r\n\r\n                                    <span style=\"float: left\">{{ networks_item.host_name }}</span>\r\n                                    <span\r\n                                        style=\"float: right;color: var(--el-text-color-secondary);font-size: 11px;\"\r\n                                        >{{ networks_item.product_name }}</span>\r\n                                </el-option>\r\n                            </el-select>\r\n                        </div >\r\n                        <div class=\"topo_value\">\r\n                            <el-input v-model=\"item.target_interface_name\" autosize  clearable class=\"inputflex\"  placeholder=\"请输入对端接口名称\"  />\r\n                        </div>\r\n                        <div>\r\n                            <el-button  @click=\"deleteContent(index)\" size=\"small\" style=\"margin-top: 3px;\">删除</el-button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style=\"margin-top: 15px;\">\r\n                    <el-button  @click=\"addContent\">添加</el-button>\r\n                </div>\r\n                \r\n\r\n                \r\n                <div style=\"float: right; margin-bottom: 40px; margin-right: 72px;margin-top: 20px;\">\r\n                    <el-button @click=\"config.centerDialogVisible = false\">取消</el-button>\r\n                    <el-button type=\"primary\" :loading=\"config.isLoading\" @click=\"updateInterfaceTopo\" >确认</el-button>\r\n                </div>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive,  getCurrentInstance, toRefs } from 'vue'\r\nimport {Delete} from '@element-plus/icons-vue'\r\nimport qs from 'qs'\r\n\r\nexport default ({\r\n    components: {\r\n        Delete\r\n    },\r\n    setup() {\r\n        const {proxy} = getCurrentInstance()\r\n        const config = reactive({\r\n            input_block: [],\r\n            input_template: {\r\n                src_netdevice_id: 0,\r\n                src_interface_name: \"\",\r\n                target_netdevice_id: null,\r\n                target_interface_name: \"\"\r\n            },\r\n            centerDialogVisible: false,\r\n            isLoading: false\r\n        })\r\n        const networks = reactive({\r\n            networks_origin: [],\r\n            networks_arr: []\r\n        })\r\n        const interfaceTopologyDetail = reactive({\r\n            interfaceTopologyDetail: []\r\n        })\r\n\r\n\r\n        // 查询网络设备列表\r\n        const getNetworkList = async()=> {\r\n            const query = qs.stringify({\r\n                page: 1,\r\n                size: 1000\r\n            })\r\n            try {\r\n                const rest = await new proxy.$request(proxy.$urls.m().networkslist + \"?\" + query).modeget()\r\n                \r\n                if (rest.data.code !== 200 ) {\r\n                    new proxy.$tips(\"获取网络设备列表失败\", \"warning\").notify()\r\n                }\r\n                networks.networks_origin = rest.data.data\r\n                networks.networks_arr = rest.data.data\r\n\r\n                for (let index = 0; index < networks.networks_origin.length; index++) {\r\n                    if (networks.networks_origin[index].id === config.input_template.src_netdevice_id) {\r\n                        networks.networks_arr.splice(index,1)\r\n                        break\r\n                    }\r\n                    \r\n                }              \r\n            } catch (e) {\r\n                console.log(e);\r\n                if (e.code !== 401) {\r\n                    new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                }     \r\n            }\r\n        }\r\n\r\n        // 编辑网络设备拓扑数据\r\n        const updateInterfaceTopo = async()=> {           \r\n            config.isLoading = true\r\n\r\n            if (config.input_block.length === 0) {\r\n                try {\r\n                    const rest = await new proxy.$request(proxy.$urls.m().interfacetopologyDeleteBySrcId + \"?id=\" + config.input_template.src_netdevice_id).modedelete()\r\n                    if (rest.data.code !== 200) {\r\n                        new proxy.$tips(\"更新网络设备拓扑数据失败，稍后重试\", \"error\").notify()\r\n                    }\r\n                    config.isLoading = false\r\n                }  catch (e) {\r\n                    if (e.code !== 401) {\r\n                        new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                    }     \r\n                } \r\n            } else {\r\n                try {\r\n                    const rest = await new proxy.$request(proxy.$urls.m().interfacetopologyupdate, config.input_block).modepost()\r\n                    if (rest.data.code !== 200) {\r\n                        new proxy.$tips(\"更新网络设备拓扑数据失败，稍后重试\", \"error\").notify()\r\n                    }\r\n                    config.isLoading = false\r\n                }catch (e) {\r\n                    if (e.code !== 401) {\r\n                        new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                    }     \r\n                }\r\n            }\r\n            config.centerDialogVisible = false\r\n            proxy.$emit('flushPage')    \r\n        }\r\n\r\n        \r\n        const addContent = ()=> {\r\n            config.input_block.push(JSON.parse(JSON.stringify(config.input_template)))\r\n        }\r\n\r\n        const deleteContent = (index)=> {\r\n            config.input_block.splice(index, 1)\r\n        }\r\n\r\n\r\n        const updateInterfaceTopoDialog = (topoDetails,src_netdevice_id) => {\r\n            config.centerDialogVisible= true\r\n            getNetworkList()\r\n            config.input_block = topoDetails\r\n            config.input_template.src_netdevice_id = src_netdevice_id\r\n        }\r\n        \r\n        return {\r\n            config,\r\n            networks,\r\n            Delete,\r\n            addContent,\r\n            deleteContent,\r\n            interfaceTopologyDetail,\r\n            updateInterfaceTopoDialog,\r\n            updateInterfaceTopo\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n})\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}