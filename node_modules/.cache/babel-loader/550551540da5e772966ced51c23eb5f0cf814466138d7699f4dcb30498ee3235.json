{"ast":null,"code":"import { reactive, toRefs, onMounted, getCurrentInstance, ref } from 'vue';\nimport { View, Hide } from '@element-plus/icons-vue';\nimport addVmDialog from './components/addvm-dialog.vue';\nimport updateVmDialog from './components/updatevm-dialog.vue';\nimport qs from 'qs';\nexport default {\n  components: {\n    View,\n    Hide,\n    addVmDialog,\n    updateVmDialog,\n    deleteVmDialog\n  },\n  setup() {\n    const config = reactive({\n      isRootPwdDisplay: false\n    });\n    const vm = reactive({\n      vm_arr: [],\n      page_size: 10,\n      page: 1,\n      total: 0\n    });\n    const addVmDialog = ref();\n    const updateVmDialog = ref();\n    const deleteVmDialog = ref();\n    onMounted(() => {\n      getVmList();\n    });\n    const {\n      proxy\n    } = getCurrentInstance();\n\n    // 查询服务器列表\n    const getVmList = async () => {\n      const query = qs.stringify({\n        page: vm.page,\n        size: vm.page_size\n      });\n      try {\n        const rest = await new proxy.$request(proxy.$urls.m().vmlist + \"?\" + query).modeget();\n        if (rest.data.code !== 200) {\n          new proxy.$tips(\"获取虚拟机列表失败\", \"warning\").notify();\n        }\n        vm.vm_arr = rest.data.data;\n        vm.total = rest.data.total;\n        vm.page = rest.data.page;\n      } catch (e) {\n        console.log(e);\n        if (e.code !== 401) {\n          new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify();\n        }\n      }\n    };\n\n    // 更改每页展示条数后触发\n    function handleSizeChange(val) {\n      vm.page_size = val;\n      getVmList();\n    }\n\n    // 更改页码后触发\n    function handleCurrentChange(val) {\n      vm.page = val;\n      getVmList();\n    }\n    const clickAddVm = val => {\n      deleteVmDialog.value.DeleteVmDialog(val);\n    };\n    const clickUpdateVm = val => {\n      updateVmDialog.value.updateVmDialog(val);\n    };\n    const clickDelete = () => {\n      console.log(\"delete\");\n    };\n    function rootPwdDisplaySwitch() {\n      config.isRootPwdDisplay = !config.isRootPwdDisplay;\n    }\n    return {\n      config,\n      rootPwdDisplaySwitch,\n      ...toRefs(vm),\n      clickDelete,\n      clickUpdateVm,\n      clickAddVm,\n      getVmList,\n      handleSizeChange,\n      handleCurrentChange,\n      addVmDialog,\n      updateVmDialog,\n      deleteVmDialog\n    };\n  }\n};","map":{"version":3,"names":["reactive","toRefs","onMounted","getCurrentInstance","ref","View","Hide","addVmDialog","updateVmDialog","qs","components","deleteVmDialog","setup","config","isRootPwdDisplay","vm","vm_arr","page_size","page","total","getVmList","proxy","query","stringify","size","rest","$request","$urls","m","vmlist","modeget","data","code","$tips","notify","e","console","log","handleSizeChange","val","handleCurrentChange","clickAddVm","value","DeleteVmDialog","clickUpdateVm","clickDelete","rootPwdDisplaySwitch"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\resource\\vm\\vm.vue"],"sourcesContent":["<template>\r\n    <div class=\"oderding\">\r\n        <div class=\"heading\">\r\n            <div>虚拟机管理</div>\r\n\r\n            <!-- 表格上方功能按钮 -->\r\n            <div class=\"table-head\">\r\n                <el-button type=\"primary\" size=\"small\" @click=\"clickAddVm\" >新建虚拟机</el-button>\r\n            </div>\r\n\r\n            <div>\r\n                <!-- 物理机表格 -->\r\n                <div>          \r\n                    <el-table :data=\"vm_arr\" stripe   style=\"width: 100% \" class=\"cell\">\r\n                        <el-table-column type=\"expand\">\r\n                            <template #default=\"props\">\r\n                                <div>\r\n                                    <div class=\"kv_display\">\r\n                                        <div class=\"k_display\">root用户密码: </div>\r\n                                        <div v-if=\"config.isRootPwdDisplay === false\" style=\"display: flex;align-items: center;\">\r\n                                            <div style=\"margin-right: 15px;\"> ---- </div> <el-icon @click=\"rootPwdDisplaySwitch\"><View /></el-icon>\r\n                                        </div>\r\n                                        <div v-else  style=\"display: flex;align-items: center;\">\r\n                                            <div style=\"margin-right: 15px;\">{{ props.row.mgt_root_pwd }}</div> <el-icon @click=\"rootPwdDisplaySwitch\"><Hide /></el-icon>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"kv_display\">\r\n                                        <div class=\"k_display\">备注信息: </div>\r\n                                        <div>{{ props.row.description }}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </template>\r\n                        </el-table-column>\r\n                        <el-table-column prop=\"host_name\" label=\"主机名\"  />\r\n                        <el-table-column prop=\"host.arch\" label=\"架构\" width=\"100px\" />\r\n                        <el-table-column prop=\"mgt_ip,storage_ip\" label=\"网络配置\"  width=200px>\r\n                            <template #default=\"scope\">\r\n                                <div> 管理网IP:{{ scope.row.mgt_ip }} </div>\r\n                                <div> 存储网IP:{{ scope.row.storage_ip }} </div>\r\n                            </template>\r\n                        </el-table-column> \r\n                        <el-table-column prop=\"tag.name\" label=\"资源分组\" />\r\n                        <el-table-column prop=\"host.host_name\" label=\"宿主机名称\" />\r\n                        <el-table-column prop=\"host.hdm_ip,host.mgt_ip,host.storage_ip\" label=\"宿主机网络配置\"  width=200px>\r\n                            <template #default=\"scope\">\r\n                                <div> HDM  IP: {{ scope.row.host.hdm_ip }} </div>\r\n                                <div> 管理网IP: {{ scope.row.host.mgt_ip }} </div>\r\n                                <div> 存储网IP: {{ scope.row.host.storage_ip }} </div>\r\n                            </template>\r\n                        </el-table-column> \r\n                        <el-table-column prop=\"user.username\" label=\"责任人\" width=\"100px\"/>\r\n\r\n\r\n                        <el-table-column fixed=\"right\" label=\"操作\" width=\"100\">\r\n                            <template #default=\"scope\">\r\n                                <el-button link type=\"primary\" size=\"small\" @click=\"clickUpdateVm(scope.row)\" >编辑</el-button>\r\n                                <el-button link type=\"primary\" size=\"small\" @click=\"clickDelete(scope.row.id)\" >删除</el-button>\r\n                            </template>\r\n                        </el-table-column>   \r\n                    </el-table>\r\n                </div>\r\n\r\n                <!-- 分页模块 -->\r\n                <div class=\"pagination\">\r\n                    <el-pagination\r\n                    v-model:current-page=\"page\"\r\n                    v-model:page-size=\"page_size\"\r\n                    :page-sizes=\"[10, 20, 50, 100]\"\r\n                    small\r\n                    background\r\n                    layout=\"total, sizes, prev, pager, next, jumper\"\r\n                    :total=\"total\"\r\n                    @size-change=\"handleSizeChange\"\r\n                    @current-change=\"handleCurrentChange\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- 创建虚拟机弹窗 -->\r\n        <addVmDialog ref=\"addVmDialog\" @flushPage=\"getVmList\"></addVmDialog>\r\n        <!-- 编辑虚拟机弹窗 -->\r\n        <updateVmDialog ref=\"updateVmDialog\" @flushPage=\"getVmList\" ></updateVmDialog>\r\n        <!-- 删除虚拟机弹窗 -->\r\n        <deleteVmDialog ref=\"deleteVmDialog\" @flushPage=\"getVmList\"></deleteVmDialog>\r\n    </div>    \r\n</template>\r\n\r\n<script>\r\nimport {reactive, toRefs, onMounted, getCurrentInstance, ref} from 'vue'\r\nimport {View, Hide} from '@element-plus/icons-vue'\r\nimport addVmDialog from './components/addvm-dialog.vue'\r\nimport updateVmDialog from './components/updatevm-dialog.vue'\r\n\r\nimport qs from 'qs'\r\n\r\nexport default {\r\n    components: {\r\n        View,\r\n        Hide,\r\n        addVmDialog,\r\n        updateVmDialog,\r\n        deleteVmDialog\r\n    },\r\n    setup() {\r\n        const config = reactive({\r\n            isRootPwdDisplay: false\r\n        })\r\n        const vm = reactive({\r\n            vm_arr: [],\r\n            page_size: 10,\r\n            page: 1,\r\n            total: 0\r\n        })\r\n        const addVmDialog = ref()\r\n        const updateVmDialog = ref()\r\n        const deleteVmDialog = ref()\r\n\r\n        onMounted(()=>{\r\n            getVmList()\r\n        })\r\n\r\n        const {proxy} = getCurrentInstance()\r\n\r\n        // 查询服务器列表\r\n        const getVmList = async()=> {\r\n            const query = qs.stringify({\r\n                page: vm.page,\r\n                size: vm.page_size\r\n            })\r\n            try {\r\n                const rest = await new proxy.$request(proxy.$urls.m().vmlist + \"?\" + query).modeget()\r\n                \r\n                if (rest.data.code !== 200 ) {\r\n                    new proxy.$tips(\"获取虚拟机列表失败\", \"warning\").notify()\r\n                }\r\n                vm.vm_arr = rest.data.data\r\n                vm.total = rest.data.total\r\n                vm.page = rest.data.page\r\n                \r\n            } catch (e) {\r\n                console.log(e);\r\n                if (e.code !== 401) {\r\n                    new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                }     \r\n            }\r\n\r\n        }\r\n\r\n\r\n        // 更改每页展示条数后触发\r\n        function handleSizeChange(val) {\r\n            vm.page_size = val\r\n            getVmList()\r\n        }\r\n\r\n        // 更改页码后触发\r\n        function handleCurrentChange(val) {\r\n            vm.page = val\r\n            getVmList()\r\n        }\r\n\r\n        const clickAddVm = (val)=> {\r\n            deleteVmDialog.value.DeleteVmDialog(val)\r\n        }\r\n\r\n        const clickUpdateVm = (val)=> {\r\n            updateVmDialog.value.updateVmDialog(val)\r\n        }\r\n\r\n        const clickDelete = ()=> {\r\n            console.log(\"delete\");\r\n        }\r\n\r\n        function rootPwdDisplaySwitch() {\r\n            config.isRootPwdDisplay = !config.isRootPwdDisplay\r\n        }\r\n        return {\r\n            config, \r\n            rootPwdDisplaySwitch,\r\n            ...toRefs(vm), \r\n            clickDelete, \r\n            clickUpdateVm, \r\n            clickAddVm,\r\n            getVmList,\r\n            handleSizeChange,\r\n            handleCurrentChange,\r\n            addVmDialog,\r\n            updateVmDialog,\r\n            deleteVmDialog\r\n        }\r\n    }\r\n}\r\n\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}