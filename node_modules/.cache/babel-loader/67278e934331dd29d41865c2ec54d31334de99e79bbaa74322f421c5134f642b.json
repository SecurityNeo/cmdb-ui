{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, onMounted, getCurrentInstance } from 'vue';\nimport { Delete } from '@element-plus/icons-vue';\nimport qs from 'qs';\nexport default {\n  components: [Delete, onMounted],\n  setup() {\n    const {\n      proxy\n    } = getCurrentInstance();\n    const config = reactive({\n      input_block: [{}],\n      input_template: [{\n        src_device_interface: \"\",\n        target_device_id: 0,\n        target_device_interface: \"\"\n      }],\n      centerDialogVisible: true,\n      isLoading: false\n    });\n    const networks = reactive({\n      networks_arr: []\n    });\n    const interfaceTopologyDetail = reactive({\n      interfaceTopologyDetail: []\n    });\n    onMounted(() => {\n      getNetworkList();\n    });\n    // 查询网络设备列表\n    const getNetworkList = async () => {\n      const query = qs.stringify({\n        page: 1,\n        size: 1000\n      });\n      try {\n        const rest = await new proxy.$request(proxy.$urls.m().networkslist + \"?\" + query).modeget();\n        if (rest.data.code !== 200) {\n          new proxy.$tips(\"获取网络设备列表失败\", \"warning\").notify();\n        }\n        networks.networks_arr = rest.data.data;\n      } catch (e) {\n        console.log(e);\n        if (e.code !== 401) {\n          new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify();\n        }\n      }\n    };\n    const getInterfaceTopology = async srcNetworksId => {\n      try {\n        const rest = await new proxy.$request(proxy.$urls.m().interfacetopologydetail + \"?id=\" + srcNetworksId).modeget();\n        if (rest.data.code !== 200) {\n          new proxy.$tips(\"获取网络设备接口拓扑列表失败\", \"warning\").notify();\n        }\n        interfaceTopologyDetail.interfaceTopologyDetail = rest.data.data;\n      } catch (e) {\n        console.log(e);\n        if (e.code !== 401) {\n          new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify();\n        }\n      }\n    };\n    const addContent = () => {\n      config.input_block.push(config.input_template);\n    };\n    const updateInterfaceTopoDialog = srcNetworksId => {\n      config.centerDialogVisible = true;\n      getInterfaceTopology(srcNetworksId);\n    };\n    return {\n      config,\n      networks,\n      Delete,\n      addContent,\n      interfaceTopologyDetail,\n      updateInterfaceTopoDialog\n    };\n  }\n};","map":{"version":3,"names":["reactive","onMounted","getCurrentInstance","Delete","qs","components","setup","proxy","config","input_block","input_template","src_device_interface","target_device_id","target_device_interface","centerDialogVisible","isLoading","networks","networks_arr","interfaceTopologyDetail","getNetworkList","query","stringify","page","size","rest","$request","$urls","m","networkslist","modeget","data","code","$tips","notify","e","console","log","getInterfaceTopology","srcNetworksId","interfacetopologydetail","addContent","push","updateInterfaceTopoDialog"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\resource\\networks\\components\\updateinterfacetopo-dialog.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-dialog\r\n            v-model=\"config.centerDialogVisible\"\r\n            title=\"更新网络设备接线信息\"\r\n            width=\"50%\"\r\n            align-center\r\n            :close-on-click-modal=\"false\"           \r\n        >\r\n\r\n            <div >\r\n                <div  v-for=\"(item,index) in config.input_block\" :key=\"index\">\r\n                    <div style=\"display: flex;\">\r\n                        <div class=\"topo_title\" style=\"width: 200px;\">本端接口名称</div>\r\n                        <div class=\"topo_title\" style=\"width: 300px;\">对端设备</div>\r\n                        <div class=\"topo_title\" style=\"width: 200px;\">对端接口名称</div>\r\n                    </div>\r\n                    <div style=\"display: flex;\">\r\n                        <div class=\"topo_value\">\r\n                            <el-input v-model=\"item.target_device_interface\" autosize  clearable class=\"inputflex\"  placeholder=\"请输入对端接口名称\"  />\r\n                        </div>\r\n                        <div class=\"topo_value\" style=\"width: 280px;\">\r\n                            <el-select v-model=\"item.target_device_id\" value-key=\"id\" placeholder=\"请选择对端网络设备\">\r\n                                <el-option\r\n                                    v-for=\"networks_item in networks.networks_arr\"\r\n                                    :key=\"networks_item.id\"\r\n                                    :label=\"networks_item.host_name\"\r\n                                    :value=\"networks_item.id\"\r\n                                    >\r\n\r\n                                    <span style=\"float: left\">{{ networks_item.host_name }}</span>\r\n                                    <span\r\n                                        style=\"float: right;color: var(--el-text-color-secondary);font-size: 11px;\"\r\n                                        >{{ networks_item.product_name }}</span>\r\n                                </el-option>\r\n                            </el-select>\r\n                        </div >\r\n                        <div class=\"topo_value\">\r\n                            <el-input v-model=\"item.src_device_interface\" autosize  clearable class=\"inputflex\"  placeholder=\"请输入本端接口名称\"  />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <el-icon>\r\n                            <Delete />\r\n                        </el-icon>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <el-button  @click=\"addContent\">添加</el-button>\r\n                </div>\r\n                \r\n\r\n                \r\n                <div style=\"float: right; margin-bottom: 40px; margin-right: 72px;margin-top: 20px;\">\r\n                    <el-button @click=\"config.centerDialogVisible = false\">取消</el-button>\r\n                    <el-button type=\"primary\" :loading=\"config.isLoading\" @click=\"updateInterfaceTopo\" >确认</el-button>\r\n                </div>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive, onMounted, getCurrentInstance } from 'vue'\r\nimport {Delete} from '@element-plus/icons-vue'\r\nimport qs from 'qs'\r\n\r\nexport default ({\r\n    components: [\r\n        Delete,\r\n        onMounted\r\n    ],\r\n    setup() {\r\n        const {proxy} = getCurrentInstance()\r\n        const config = reactive({\r\n            input_block: [{}],\r\n            input_template: [\r\n                {\r\n                    src_device_interface: \"\",\r\n                    target_device_id: 0,\r\n                    target_device_interface: \"\"\r\n                }\r\n            ],\r\n            centerDialogVisible: true,\r\n            isLoading: false\r\n        })\r\n        const networks = reactive({\r\n            networks_arr: []\r\n        })\r\n        const interfaceTopologyDetail = reactive({\r\n            interfaceTopologyDetail: []\r\n        })\r\n\r\n        onMounted(()=>{\r\n            getNetworkList()\r\n        })\r\n        // 查询网络设备列表\r\n        const getNetworkList = async()=> {\r\n            const query = qs.stringify({\r\n                page: 1,\r\n                size: 1000\r\n            })\r\n            try {\r\n                const rest = await new proxy.$request(proxy.$urls.m().networkslist + \"?\" + query).modeget()\r\n                \r\n                if (rest.data.code !== 200 ) {\r\n                    new proxy.$tips(\"获取网络设备列表失败\", \"warning\").notify()\r\n                }\r\n                networks.networks_arr = rest.data.data\r\n                \r\n            } catch (e) {\r\n                console.log(e);\r\n                if (e.code !== 401) {\r\n                    new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                }     \r\n            }\r\n\r\n        }\r\n\r\n        const getInterfaceTopology = async(srcNetworksId) => {\r\n            try {\r\n                const rest = await new proxy.$request(proxy.$urls.m().interfacetopologydetail + \"?id=\" + srcNetworksId).modeget()\r\n                \r\n                if (rest.data.code !== 200 ) {\r\n                    new proxy.$tips(\"获取网络设备接口拓扑列表失败\", \"warning\").notify()\r\n                }\r\n                interfaceTopologyDetail.interfaceTopologyDetail = rest.data.data\r\n                \r\n            } catch (e) {\r\n                console.log(e);\r\n                if (e.code !== 401) {\r\n                    new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                }     \r\n            }\r\n        }\r\n\r\n        const addContent = ()=> {\r\n            config.input_block.push(config.input_template)\r\n        }\r\n\r\n        const updateInterfaceTopoDialog = (srcNetworksId) => {\r\n            config.centerDialogVisible= true\r\n            getInterfaceTopology(srcNetworksId)\r\n        }\r\n        \r\n        return {config,networks,Delete,addContent,interfaceTopologyDetail,updateInterfaceTopoDialog}\r\n    }\r\n\r\n    \r\n    \r\n})\r\n</script>\r\n"],"mappings":";AA+DA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,kBAAiB,QAAS,KAAI;AAC5D,SAAQC,MAAM,QAAO,yBAAwB;AAC7C,OAAOC,EAAC,MAAO,IAAG;AAElB,eAAgB;EACZC,UAAU,EAAE,CACRF,MAAM,EACNF,SAAQ,CACX;EACDK,KAAKA,CAAA,EAAG;IACJ,MAAM;MAACC;IAAK,IAAIL,kBAAkB,CAAC;IACnC,MAAMM,MAAK,GAAIR,QAAQ,CAAC;MACpBS,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;MACjBC,cAAc,EAAE,CACZ;QACIC,oBAAoB,EAAE,EAAE;QACxBC,gBAAgB,EAAE,CAAC;QACnBC,uBAAuB,EAAE;MAC7B,EACH;MACDC,mBAAmB,EAAE,IAAI;MACzBC,SAAS,EAAE;IACf,CAAC;IACD,MAAMC,QAAO,GAAIhB,QAAQ,CAAC;MACtBiB,YAAY,EAAE;IAClB,CAAC;IACD,MAAMC,uBAAsB,GAAIlB,QAAQ,CAAC;MACrCkB,uBAAuB,EAAE;IAC7B,CAAC;IAEDjB,SAAS,CAAC,MAAI;MACVkB,cAAc,CAAC;IACnB,CAAC;IACD;IACA,MAAMA,cAAa,GAAI,MAAAA,CAAA,KAAU;MAC7B,MAAMC,KAAI,GAAIhB,EAAE,CAACiB,SAAS,CAAC;QACvBC,IAAI,EAAE,CAAC;QACPC,IAAI,EAAE;MACV,CAAC;MACD,IAAI;QACA,MAAMC,IAAG,GAAI,MAAM,IAAIjB,KAAK,CAACkB,QAAQ,CAAClB,KAAK,CAACmB,KAAK,CAACC,CAAC,CAAC,CAAC,CAACC,YAAW,GAAI,GAAE,GAAIR,KAAK,CAAC,CAACS,OAAO,CAAC;QAE1F,IAAIL,IAAI,CAACM,IAAI,CAACC,IAAG,KAAM,GAAE,EAAI;UACzB,IAAIxB,KAAK,CAACyB,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAACC,MAAM,CAAC;QACpD;QACAjB,QAAQ,CAACC,YAAW,GAAIO,IAAI,CAACM,IAAI,CAACA,IAAG;MAEzC,EAAE,OAAOI,CAAC,EAAE;QACRC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;QACd,IAAIA,CAAC,CAACH,IAAG,KAAM,GAAG,EAAE;UAChB,IAAIxB,KAAK,CAACyB,KAAK,CAAC,aAAa,EAAE,OAAO,CAAC,CAACC,MAAM,CAAC;QACnD;MACJ;IAEJ;IAEA,MAAMI,oBAAmB,GAAI,MAAMC,aAAa,IAAK;MACjD,IAAI;QACA,MAAMd,IAAG,GAAI,MAAM,IAAIjB,KAAK,CAACkB,QAAQ,CAAClB,KAAK,CAACmB,KAAK,CAACC,CAAC,CAAC,CAAC,CAACY,uBAAsB,GAAI,MAAK,GAAID,aAAa,CAAC,CAACT,OAAO,CAAC;QAEhH,IAAIL,IAAI,CAACM,IAAI,CAACC,IAAG,KAAM,GAAE,EAAI;UACzB,IAAIxB,KAAK,CAACyB,KAAK,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAACC,MAAM,CAAC;QACxD;QACAf,uBAAuB,CAACA,uBAAsB,GAAIM,IAAI,CAACM,IAAI,CAACA,IAAG;MAEnE,EAAE,OAAOI,CAAC,EAAE;QACRC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;QACd,IAAIA,CAAC,CAACH,IAAG,KAAM,GAAG,EAAE;UAChB,IAAIxB,KAAK,CAACyB,KAAK,CAAC,aAAa,EAAE,OAAO,CAAC,CAACC,MAAM,CAAC;QACnD;MACJ;IACJ;IAEA,MAAMO,UAAS,GAAIA,CAAA,KAAK;MACpBhC,MAAM,CAACC,WAAW,CAACgC,IAAI,CAACjC,MAAM,CAACE,cAAc;IACjD;IAEA,MAAMgC,yBAAwB,GAAKJ,aAAa,IAAK;MACjD9B,MAAM,CAACM,mBAAmB,GAAE,IAAG;MAC/BuB,oBAAoB,CAACC,aAAa;IACtC;IAEA,OAAO;MAAC9B,MAAM;MAACQ,QAAQ;MAACb,MAAM;MAACqC,UAAU;MAACtB,uBAAuB;MAACwB;IAAyB;EAC/F;AAIJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}