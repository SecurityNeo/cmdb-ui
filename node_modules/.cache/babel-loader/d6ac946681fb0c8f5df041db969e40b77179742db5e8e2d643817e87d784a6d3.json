{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport { reactive, ref, toRefs } from 'vue';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport 'xterm/css/xterm.css';\nimport { debounce } from 'lodash';\nexport default {\n  setup() {\n    const packResize = (cols, rows) => JSON.stringify({\n      type: 'resize',\n      cols: cols,\n      rows: rows\n    });\n    const formdata = reactive({\n      ip: \"\",\n      port: 22,\n      user: \"root\",\n      password: \"\"\n    });\n    const term = ref();\n    const fitAddon = new FitAddon();\n    const terminal = ref(null);\n    let terminalSocket = ref(null);\n    const initText = \"正在努力连接...\\r\\n\";\n    const socketUrl = \"ws://10.210.20.33:18080/api/v1/resource/vm/ssh\";\n    const ws = ref(null);\n    const first = ref(true);\n    let activeName = \"first\";\n\n    // const validate = (rule, value, callback)=> {\n    //     if (value === '') {\n    //         callback(new Error('内容不能为空'));\n    //     } else {\n    //         callback();\n    //     }\n    // }\n\n    // const rules =  {\n    //     ip: [\n    //         {validator: validate, trigger: 'blur'}\n    //     ],\n    //     port: [\n    //         {validator: validate, trigger: 'blur'}\n    //     ],\n    //     user: [\n    //         {validator: validate, trigger: 'blur'}\n    //     ],\n    //     pwd: [\n    //         {validator: validate, trigger: 'blur'}\n    //     ],\n    // }\n\n    const fitTerm = () => {\n      fitAddon.fit();\n    };\n    const initWs = () => {\n      initTerm();\n      initSocket();\n      onTerminalResize();\n      onTerminalKeyPress();\n    };\n    const onResize = debounce(() => fitTerm(), 500);\n    function resizeRemoteTerminal() {\n      const {\n        cols,\n        rows\n      } = term.value;\n      console.log('列数、行数设置为：', cols, rows);\n      // 调整后端终端大小 使后端与前端终端大小一致\n      isWsOpen() && terminalSocket.value.send(packResize(cols, rows));\n    }\n    function onTerminalResize() {\n      window.addEventListener('resize', onResize);\n      term.value.onResize(resizeRemoteTerminal);\n    }\n    function removeResizeListener() {\n      window.removeEventListener('resize', onResize);\n    }\n\n    // 打开连接\n    const onOpenSocket = () => {\n      terminalSocket.onopen = () => {\n        console.log(formdata);\n        terminalSocket.value.send(JSON.stringify({\n          type: \"addr\",\n          data: utf8_to_b64(formdata.ip + ':' + formdata.port)\n        }));\n        // socket.send(JSON.stringify({ type: \"term\", data: utf8_to_b64(\"linux\") }));\n        terminalSocket.value.send(JSON.stringify({\n          type: \"login\",\n          data: utf8_to_b64(formdata.user)\n        }));\n        terminalSocket.value.send(JSON.stringify({\n          type: \"password\",\n          data: utf8_to_b64(formdata.pwd)\n        }));\n        term.reset();\n        setTimeout(() => {\n          resizeRemoteTerminal();\n        }, 500);\n      };\n    };\n    // 关闭连接\n    const onCloseSocket = () => {\n      terminalSocket.onclose = () => {\n        term.value.write('连接未成功，请刷新页面后重新连接...\\r\\n');\n      };\n    };\n\n    // 连接错误\n    const onErrorSocket = () => {\n      terminalSocket.onerror = () => {\n        term.write(\"连接失败，请刷新页面后重新连接...\\r\\n\");\n      };\n    };\n\n    // 接受消息\n    const onMessageSocket = () => {\n      terminalSocket.onmessage = res => {\n        const msg = JSON.parse(res.data);\n        const term = term;\n        // 首次连接成功将initText清空\n        if (first.value) {\n          first.value = false;\n          term.value.reset();\n          term.value.element && term.value.focus();\n          resizeRemoteTerminal();\n        }\n        term.write(b64_to_utf8(msg.data));\n      };\n    };\n    const initTerm = () => {\n      term.value = new Terminal({\n        lineHeight: 1.2,\n        fontSize: 12,\n        fontFamily: \"Monaco, Menlo, Consolas, 'Courier New', monospace\",\n        theme: {\n          // 背景色\n          background: '#ffffff',\n          // 前景色\n          foreground: '#000000',\n          // 光标背景色\n          cursor: '#000000',\n          // 光标前景色\n          /** The accent color of the cursor (fg color for a block cursor) */\n          // cursorAccent: '#000000',\n          // 选择背景色\n          /** The selection background color (can be transparent) */\n          selection: '#0000ff',\n          // 选择前景色\n          /** The selection foreground color */\n          selectionForeground: '#0000ff'\n        },\n        // 光标闪烁\n        cursorBlink: true,\n        // 光标样式 'block' | 'underline' | 'bar'\n        cursorStyle: 'block',\n        scrollback: 100,\n        tabStopWidth: 4,\n        cols: 30 // 初始化的时候不要设置fit，设置col为较小值（最小为可展示initText初始文字即可）方便屏幕缩放\n      });\n\n      term.value.open(terminal.value);\n      term.value.loadAddon(fitAddon);\n\n      // 不能初始化的时候fit,需要等terminal准备就绪\n      // fitAddon.fit()\n      // 必须设置延迟\n      setTimeout(() => {\n        fitAddon.fit();\n      }, 500);\n    };\n    const isWsOpen = () => {\n      const readyState = terminalSocket.value && terminalSocket.value.readyState;\n      return readyState === 1;\n    };\n    const onTerminalKeyPress = () => {\n      term.value.onData(data => {\n        if (isWsOpen()) {\n          terminalSocket.value.send(JSON.stringify({\n            type: 'stdin',\n            data: utf8_to_b64(data)\n          }));\n        }\n      });\n    };\n    const initSocket = () => {\n      term.value.write(initText);\n      terminalSocket.value = new WebSocket(socketUrl, ['webssh']);\n      terminalSocket.value.onopen = onOpenSocket();\n      terminalSocket.value.onclose = onCloseSocket();\n      terminalSocket.value.onerror = onErrorSocket();\n      term.value._initialized = true;\n      terminalSocket.value.onmessage = onMessageSocket();\n    };\n\n    // function bytesHuman(bytes, precision) {\n    //     if (!/^([-+])?|(\\.\\d+)(\\d+(\\.\\d+)?|(\\d+\\.)|Infinity)$/.test(bytes)) {\n    //         return '-'\n    //     }\n    //     if (bytes === 0) return '0';\n    //     if (typeof precision === 'undefined') precision = 1;\n    //     const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'BB'];\n    //     const num = Math.floor(Math.log(bytes) / Math.log(1024));\n    //     const value = (bytes / Math.pow(1024, Math.floor(num))).toFixed(precision);\n    //     return `${value} ${units[num]}`\n    // }\n\n    function utf8_to_b64(rawString) {\n      return btoa(unescape(encodeURIComponent(rawString)));\n    }\n    function b64_to_utf8(encodeString) {\n      return decodeURIComponent(escape(atob(encodeString)));\n    }\n    const submitWebSsh = () => {\n      activeName = 'second';\n      initWs();\n    };\n    const resetWebSsh = formname => {\n      formname.resetFields();\n    };\n    const handleClick = (tab, event) => {\n      if (tab.name === 'second') {\n        // this.init()\n      }\n    };\n    return {\n      activeName,\n      //rules,\n      formdata,\n      terminal,\n      submitWebSsh,\n      resetWebSsh,\n      handleClick\n    };\n  }\n};","map":{"version":3,"names":["reactive","ref","toRefs","Terminal","FitAddon","debounce","setup","packResize","cols","rows","JSON","stringify","type","formdata","ip","port","user","password","term","fitAddon","terminal","terminalSocket","initText","socketUrl","ws","first","activeName","fitTerm","fit","initWs","initTerm","initSocket","onTerminalResize","onTerminalKeyPress","onResize","resizeRemoteTerminal","value","console","log","isWsOpen","send","window","addEventListener","removeResizeListener","removeEventListener","onOpenSocket","onopen","data","utf8_to_b64","pwd","reset","setTimeout","onCloseSocket","onclose","write","onErrorSocket","onerror","onMessageSocket","onmessage","res","msg","parse","element","focus","b64_to_utf8","lineHeight","fontSize","fontFamily","theme","background","foreground","cursor","selection","selectionForeground","cursorBlink","cursorStyle","scrollback","tabStopWidth","open","loadAddon","readyState","onData","WebSocket","_initialized","rawString","btoa","unescape","encodeURIComponent","encodeString","decodeURIComponent","escape","atob","submitWebSsh","resetWebSsh","formname","resetFields","handleClick","tab","event","name"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\resource\\vm\\components\\webssh-dialog.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\" style=\"margin-left: 1vh; margin-right: 1vh\">\r\n        <el-tab-pane name=\"first\" label=\"连接配置\">\r\n          <div style=\"text-align: center\">\r\n            <el-form  :model=\"formdata\" status-icon label-position=\"left\" label-width=\"80px\" style=\"margin-left: 50vh; width: 50vh\">\r\n              <el-form-item label=\"IP地址：\">\r\n                <el-input v-model=\"formdata.ip\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"端口号：\">\r\n                <el-input v-model=\"formdata.port\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"用户名：\">\r\n                <el-input v-model=\"formdata.user\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"密码：\">\r\n                <el-input v-model=\"formdata.password\" type=\"password\"/>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button type=\"primary\" @click=\"submitWebSsh(formdata)\">连接</el-button>\r\n                <el-button @click=\"resetWebSsh(formdata)\">重置</el-button>\r\n              </el-form-item>\r\n            </el-form>\r\n          </div>\r\n        </el-tab-pane>\r\n        <el-tab-pane name=\"second\" label=\"终端\">\r\n          <div class=\"ssh-container\" ref=\"terminal\"></div>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport { reactive, ref, toRefs } from 'vue'\r\nimport { Terminal } from 'xterm'\r\nimport { FitAddon } from 'xterm-addon-fit'\r\nimport 'xterm/css/xterm.css'\r\nimport { debounce } from 'lodash'\r\n\r\n\r\nexport default {\r\n    setup(){\r\n        const packResize = (cols, rows) =>\r\n            JSON.stringify({\r\n            type: 'resize',\r\n            cols: cols,\r\n            rows: rows\r\n        })\r\n\r\n        const formdata = reactive({\r\n            ip: \"\",\r\n            port: 22,\r\n            user: \"root\",\r\n            password: \"\",\r\n        })\r\n        const term = ref()\r\n        const fitAddon = new FitAddon()\r\n        const terminal = ref(null)\r\n        let terminalSocket = ref(null);\r\n        const initText = \"正在努力连接...\\r\\n\"\r\n        const socketUrl = \"ws://10.210.20.33:18080/api/v1/resource/vm/ssh\"\r\n        const ws = ref(null)\r\n        const first = ref(true)\r\n        let activeName = \"first\"\r\n\r\n\r\n        // const validate = (rule, value, callback)=> {\r\n        //     if (value === '') {\r\n        //         callback(new Error('内容不能为空'));\r\n        //     } else {\r\n        //         callback();\r\n        //     }\r\n        // }\r\n\r\n        // const rules =  {\r\n        //     ip: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        //     port: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        //     user: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        //     pwd: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        // }\r\n\r\n        const fitTerm = () => {\r\n            fitAddon.fit()\r\n        }\r\n\r\n\r\n        const initWs = ()=> {\r\n            initTerm()\r\n            initSocket()\r\n            onTerminalResize()\r\n            onTerminalKeyPress()\r\n        }\r\n\r\n        const onResize = debounce(() => fitTerm(), 500);\r\n\r\n        function resizeRemoteTerminal() {\r\n            const { cols, rows } = term.value\r\n            console.log('列数、行数设置为：', cols, rows)\r\n            // 调整后端终端大小 使后端与前端终端大小一致\r\n            isWsOpen() && terminalSocket.value.send(packResize(cols, rows))\r\n        } \r\n\r\n        function onTerminalResize() {\r\n            window.addEventListener('resize', onResize)\r\n            term.value.onResize(resizeRemoteTerminal)\r\n        }\r\n        function removeResizeListener() {\r\n            window.removeEventListener('resize', onResize)\r\n        }\r\n\r\n        // 打开连接\r\n        const onOpenSocket = ()=> {\r\n            terminalSocket.onopen = () => {\r\n                console.log(formdata);\r\n                terminalSocket.value.send(JSON.stringify({ type: \"addr\", data: utf8_to_b64(formdata.ip + ':' + formdata.port) }));\r\n                // socket.send(JSON.stringify({ type: \"term\", data: utf8_to_b64(\"linux\") }));\r\n                terminalSocket.value.send(JSON.stringify({ type: \"login\", data: utf8_to_b64(formdata.user) }));\r\n                terminalSocket.value.send(JSON.stringify({ type: \"password\", data: utf8_to_b64(formdata.pwd) }));\r\n                term.reset()\r\n                setTimeout(() => {\r\n                    resizeRemoteTerminal()\r\n                }, 500)\r\n            }\r\n        }\r\n        // 关闭连接\r\n        const onCloseSocket = ()=> {\r\n            terminalSocket.onclose = () => {\r\n                term.value.write('连接未成功，请刷新页面后重新连接...\\r\\n');\r\n            }\r\n        }\r\n\r\n        // 连接错误\r\n        const onErrorSocket = () => {\r\n            terminalSocket.onerror = () => {\r\n                term.write(\"连接失败，请刷新页面后重新连接...\\r\\n\")\r\n            }\r\n        }\r\n\r\n        // 接受消息\r\n        const  onMessageSocket = ()=> {\r\n            terminalSocket.onmessage = res => {\r\n                const msg = JSON.parse(res.data)\r\n                const term = term\r\n                // 首次连接成功将initText清空\r\n                if (first.value) {\r\n                    first.value = false\r\n                    term.value.reset()\r\n                    term.value.element && term.value.focus()\r\n                    resizeRemoteTerminal()\r\n                }\r\n                term.write(b64_to_utf8(msg.data))\r\n            }\r\n        }\r\n\r\n\r\n        const initTerm = () => {\r\n            term.value = new Terminal({\r\n                lineHeight: 1.2,\r\n                fontSize: 12,\r\n                fontFamily: \"Monaco, Menlo, Consolas, 'Courier New', monospace\",\r\n                theme: {\r\n                    // 背景色\r\n                    background: '#ffffff',\r\n                    // 前景色\r\n                    foreground: '#000000',\r\n                    // 光标背景色\r\n                    cursor: '#000000',\r\n                    // 光标前景色\r\n                    /** The accent color of the cursor (fg color for a block cursor) */\r\n                    // cursorAccent: '#000000',\r\n                    // 选择背景色\r\n                    /** The selection background color (can be transparent) */\r\n                    selection: '#0000ff',\r\n                    // 选择前景色\r\n                    /** The selection foreground color */\r\n                    selectionForeground: '#0000ff'\r\n                },\r\n                // 光标闪烁\r\n                cursorBlink: true,\r\n                // 光标样式 'block' | 'underline' | 'bar'\r\n                cursorStyle: 'block',\r\n                scrollback: 100,\r\n                tabStopWidth: 4,\r\n                cols: 30 // 初始化的时候不要设置fit，设置col为较小值（最小为可展示initText初始文字即可）方便屏幕缩放\r\n            })\r\n            term.value.open(terminal.value)\r\n            term.value.loadAddon(fitAddon)\r\n            \r\n            // 不能初始化的时候fit,需要等terminal准备就绪\r\n            // fitAddon.fit()\r\n            // 必须设置延迟\r\n            setTimeout(() => {\r\n                fitAddon.fit()\r\n            }, 500);\r\n        }\r\n\r\n        const isWsOpen = () => {\r\n            const readyState = terminalSocket.value && terminalSocket.value.readyState;\r\n            return readyState === 1\r\n        }\r\n\r\n        const onTerminalKeyPress = ()=> {\r\n            term.value.onData(data => {\r\n                if (isWsOpen()) {\r\n                    terminalSocket.value.send(JSON.stringify({\r\n                        type: 'stdin',\r\n                        data: utf8_to_b64(data) \r\n                    }))\r\n                }\r\n            })\r\n        }\r\n\r\n        const initSocket = () => {\r\n            term.value.write(initText)\r\n            terminalSocket.value = new WebSocket(socketUrl,['webssh'])\r\n            terminalSocket.value.onopen = onOpenSocket()\r\n            terminalSocket.value.onclose = onCloseSocket()\r\n            terminalSocket.value.onerror = onErrorSocket()\r\n            term.value._initialized = true\r\n            terminalSocket.value.onmessage = onMessageSocket() \r\n        }\r\n\r\n\r\n        // function bytesHuman(bytes, precision) {\r\n        //     if (!/^([-+])?|(\\.\\d+)(\\d+(\\.\\d+)?|(\\d+\\.)|Infinity)$/.test(bytes)) {\r\n        //         return '-'\r\n        //     }\r\n        //     if (bytes === 0) return '0';\r\n        //     if (typeof precision === 'undefined') precision = 1;\r\n        //     const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'BB'];\r\n        //     const num = Math.floor(Math.log(bytes) / Math.log(1024));\r\n        //     const value = (bytes / Math.pow(1024, Math.floor(num))).toFixed(precision);\r\n        //     return `${value} ${units[num]}`\r\n        // }\r\n\r\n        function utf8_to_b64(rawString) {\r\n            return btoa(unescape(encodeURIComponent(rawString)));\r\n        }\r\n\r\n        function b64_to_utf8(encodeString) {\r\n            return decodeURIComponent(escape(atob(encodeString)));\r\n        }\r\n\r\n        const submitWebSsh = () => {\r\n            activeName = 'second'\r\n            initWs()\r\n        }\r\n        \r\n        const resetWebSsh = (formname)=> {\r\n            formname.resetFields()\r\n        }\r\n\r\n        const handleClick = (tab, event)=> {\r\n            if (tab.name === 'second') {\r\n                // this.init()\r\n            }\r\n        }\r\n        \r\n        return {\r\n            activeName,\r\n            //rules,\r\n            formdata,\r\n            terminal,\r\n            submitWebSsh,\r\n            resetWebSsh,\r\n            handleClick\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n</script>\r\n<style lang=\"scss\">\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.ssh-container {\r\n    overflow: hidden;\r\n    height: 85vh;\r\n    border-radius: 4px;\r\n    background: rgb(255, 255, 255);\r\n    padding: 0px;\r\n    //color: rgb(0, 0, 0);\r\n\r\n    .xterm-scroll-area::-webkit-scrollbar-thumb {\r\n        background-color: #b7c4d1;\r\n        /* 滚动条的背景颜色 */\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}