{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"text-align\": \"center\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"ssh-container\",\n  ref: \"terminal\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_tab_pane = _resolveComponent(\"el-tab-pane\");\n  const _component_el_tabs = _resolveComponent(\"el-tabs\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_tabs, {\n    modelValue: $data.activeName,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.activeName = $event),\n    onTabClick: $options.handleClick,\n    style: {\n      \"margin-left\": \"1vh\",\n      \"margin-right\": \"1vh\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_tab_pane, {\n      name: \"first\",\n      label: \"连接配置\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_el_form, {\n        ref: \"form\",\n        model: $data.form,\n        \"status-icon\": \"\",\n        rules: $data.rules,\n        \"label-position\": \"left\",\n        \"label-width\": \"80px\",\n        style: {\n          \"margin-left\": \"50vh\",\n          \"width\": \"50vh\"\n        }\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_form_item, {\n          label: \"IP地址\",\n          prop: \"ip\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: $data.form.ip,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form.ip = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, {\n          label: \"端口\",\n          prop: \"port\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: $data.form.port,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.form.port = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, {\n          label: \"用户名\",\n          prop: \"user\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: $data.form.user,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.form.user = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, {\n          label: \"密码\",\n          prop: \"pwd\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: $data.form.pwd,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.form.pwd = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, null, {\n          default: _withCtx(() => [_createVNode(_component_el_button, {\n            type: \"primary\",\n            onClick: _cache[4] || (_cache[4] = $event => $options.submitForm('form'))\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"连接\")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_button, {\n            onClick: _cache[5] || (_cache[5] = $event => $options.resetForm('form'))\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"重置\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\", \"rules\"])])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_tab_pane, {\n      name: \"second\",\n      label: \"终端\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onTabClick\"])]);\n}","map":{"version":3,"names":["style","class","ref","_createElementBlock","_createVNode","_component_el_tabs","$data","activeName","$event","onTabClick","$options","handleClick","_component_el_tab_pane","name","label","_createElementVNode","_hoisted_1","_component_el_form","model","form","rules","_component_el_form_item","prop","_component_el_input","ip","port","user","pwd","_component_el_button","type","onClick","_cache","submitForm","resetForm","_hoisted_2"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\webssh\\webssh.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\" style=\"margin-left: 1vh; margin-right: 1vh\">\r\n        <el-tab-pane name=\"first\" label=\"连接配置\">\r\n            <div style=\"text-align: center\">\r\n                <el-form ref=\"form\" :model=\"form\" status-icon :rules=\"rules\" label-position=\"left\" label-width=\"80px\" style=\"margin-left: 50vh; width: 50vh\">\r\n                    <el-form-item label=\"IP地址\" prop=\"ip\">\r\n                        <el-input v-model=\"form.ip\"/>\r\n                    </el-form-item>\r\n                    <el-form-item label=\"端口\" prop=\"port\">\r\n                        <el-input v-model=\"form.port\"/>\r\n                    </el-form-item>\r\n                    <el-form-item label=\"用户名\" prop=\"user\">\r\n                        <el-input v-model=\"form.user\"/>\r\n                    </el-form-item>\r\n                    <el-form-item label=\"密码\" prop=\"pwd\">\r\n                        <el-input v-model=\"form.pwd\" />\r\n                    </el-form-item>\r\n                    <el-form-item>\r\n                        <el-button type=\"primary\" @click=\"submitForm('form')\">连接</el-button>\r\n                        <el-button @click=\"resetForm('form')\">重置</el-button>\r\n                    </el-form-item>\r\n                </el-form>\r\n            </div>\r\n        </el-tab-pane>\r\n        <el-tab-pane name=\"second\" label=\"终端\">\r\n            <div class=\"ssh-container\" ref=\"terminal\"></div>\r\n        </el-tab-pane>\r\n        </el-tabs>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { Terminal } from 'xterm'\r\nimport { FitAddon } from 'xterm-addon-fit'\r\nimport 'xterm/css/xterm.css'\r\nimport { debounce } from 'lodash'\r\nimport { getCurrentInstance } from 'vue'\r\n\r\n\r\nconst packResize = (cols, rows) => {\r\n    JSON.stringify({\r\n        type: 'resize',\r\n        cols: cols,\r\n        rows: rows\r\n    })\r\n}\r\n\r\nexport default {\r\n    name: 'MyTerminal',\r\n    created() {\r\n        this.form.ip = this.$route.query.ip || ''\r\n        this.form.port = this.$route.query.port || ''\r\n    },\r\n    data() {\r\n        var validate = (rule, value, callback) => {\r\n            if (value === '') {\r\n                callback(new Error('不能为空'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        const {proxy} = getCurrentInstance()\r\n        return {\r\n            rules: {\r\n                ip: [\r\n                    {validator: validate, trigger: 'blur'}\r\n                ],\r\n                port: [\r\n                    {validator: validate, trigger: 'blur'}\r\n                ],\r\n                user: [\r\n                    {validator: validate, trigger: 'blur'}\r\n                ],\r\n                pwd: [\r\n                    {validator: validate, trigger: 'blur'}\r\n                ],\r\n            },\r\n            activeName: 'first',\r\n            initText: '正在努力连接...\\r\\n',\r\n            first: true,\r\n            term: null,\r\n            fitAddon: null,\r\n            ws: null,\r\n            socketUrl: proxy.$urls.m().ws,\r\n            form: {\r\n                user: 'root',\r\n                pwd: '',\r\n                ip: '',\r\n                port: '22',\r\n            },\r\n            option: {\r\n                lineHeight: 1.2,\r\n                cursorBlink: true,\r\n                cursorStyle: 'block', // 光标样式 'block' | 'underline' | 'bar'\r\n                fontSize: 15,\r\n                // fontcolor: '#000000',\r\n                fontFamily: \"Monaco, Menlo, Consolas, 'Courier New', monospace\",\r\n                theme: {\r\n                // 背景色\r\n                background: '#ffffff',\r\n                // 前景色\r\n                foreground: '#000000',\r\n                // 光标背景色\r\n                cursor: '#000000',\r\n                // 光标前景色\r\n                /** The accent color of the cursor (fg color for a block cursor) */\r\n                // cursorAccent: '#000000',\r\n                // 选择背景色\r\n                /** The selection background color (can be transparent) */\r\n                selection: '#0000ff',\r\n                // 选择前景色\r\n                /** The selection foreground color */\r\n                selectionForeground: '#0000ff'\r\n                },\r\n                cols: 30 // 初始化的时候不要设置fit，设置col为较小值（最小为可展示initText初始文字即可）方便屏幕缩放\r\n            }\r\n        }\r\n    },\r\n    // mounted() {\r\n    //   this.initTerm()\r\n    //   this.initSocket()\r\n    //\r\n    //   this.onTerminalResize()\r\n    //   this.onTerminalKeyPress()\r\n    // },\r\n    beforeDestroy() {\r\n        this.removeResizeListener()\r\n        this.term && this.term.dispose()\r\n        this.ws.send(JSON.stringify({\r\n            type: 'stdin',\r\n            data: this.utf8_to_b64('exit')\r\n        }))\r\n    },\r\n    methods: {\r\n        destroyed(){\r\n            this.ws.send(JSON.stringify({\r\n                type: 'stdin',\r\n                data: this.utf8_to_b64('exit')\r\n            }))\r\n        },\r\n        initWs() {\r\n            this.initTerm()\r\n            this.initSocket()\r\n            this.onTerminalResize()\r\n            this.onTerminalKeyPress()\r\n        },\r\n        submitForm(formName) {\r\n        this.$refs[formName].validate((valid) => {\r\n            if (valid) {\r\n                this.activeName = 'second'\r\n                this.initWs()\r\n            } else {\r\n                console.log('error submit!!');\r\n                return false;\r\n            }\r\n        });\r\n        },\r\n        resetForm(formName) {\r\n            this.$refs[formName].resetFields();\r\n        },\r\n        handleClick(tab, event) {\r\n            if (tab.name === 'second') {\r\n                // this.init()\r\n            }\r\n        },\r\n        utf8_to_b64(rawString) {\r\n            return btoa(unescape(encodeURIComponent(rawString)));\r\n        },\r\n        b64_to_utf8(encodeString) {\r\n            return decodeURIComponent(escape(atob(encodeString)));\r\n        },\r\n        bytesHuman(bytes, precision) {\r\n            if (!/^([-+])?|(\\.\\d+)(\\d+(\\.\\d+)?|(\\d+\\.)|Infinity)$/.test(bytes)) {\r\n                return '-'\r\n            }\r\n            if (bytes === 0) return '0';\r\n            if (typeof precision === 'undefined') precision = 1;\r\n            const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'BB'];\r\n            const num = Math.floor(Math.log(bytes) / Math.log(1024));\r\n            const value = (bytes / Math.pow(1024, Math.floor(num))).toFixed(precision);\r\n            return `${value} ${units[num]}`\r\n        },\r\n        isWsOpen() {\r\n            return this.ws && this.ws.readyState === 1\r\n        },\r\n        initTerm() {\r\n            this.term = new Terminal(this.option)\r\n            this.fitAddon = new FitAddon()\r\n            this.term.loadAddon(this.fitAddon)\r\n            this.term.open(this.$refs.terminal)\r\n            // this.fitAddon.fit() // 初始化的时候不要使用fit\r\n            setTimeout(() => {\r\n                this.fitAddon.fit()\r\n            }, 500); // 必须延时处理\r\n        },\r\n        onTerminalKeyPress() {\r\n        this.term.onData(data => {\r\n            this.isWsOpen() && this.ws.send(JSON.stringify({\r\n            type: 'stdin',\r\n            data: this.utf8_to_b64(data)\r\n            }))\r\n        })\r\n        },\r\n        // resize 相关\r\n        resizeRemoteTerminal() {\r\n            const { cols, rows } = this.term\r\n            console.log('列数、行数设置为：', cols, rows)\r\n            // 调整后端终端大小 使后端与前端终端大小一致\r\n            this.isWsOpen() && this.ws.send(packResize(cols, rows))\r\n        },\r\n        onResize: debounce(function () {\r\n            this.fitAddon.fit()\r\n        }, 500),\r\n        onTerminalResize() {\r\n            window.addEventListener('resize', this.onResize)\r\n            this.term.onResize(this.resizeRemoteTerminal)\r\n        },\r\n        removeResizeListener() {\r\n            window.removeEventListener('resize', this.onResize)\r\n        },\r\n        // socket\r\n        initSocket() {\r\n            this.term.write(this.initText)\r\n            console.log(this.socketUrl)\r\n            this.ws = new WebSocket(this.socketUrl,['webssh'])\r\n            this.onOpenSocket()\r\n            this.onCloseSocket()\r\n            this.onErrorSocket()\r\n            this.term._initialized = true\r\n            this.onMessageSocket()\r\n        },\r\n        // 打开连接\r\n        onOpenSocket() {\r\n        this.ws.onopen = () => {\r\n            console.log('websocket 已连接')\r\n            this.ws.send(JSON.stringify({ type: \"addr\", data: this.utf8_to_b64(this.form.ip + ':' + this.form.port) }));\r\n            // socket.send(JSON.stringify({ type: \"term\", data: utf8_to_b64(\"linux\") }));\r\n            this.ws.send(JSON.stringify({ type: \"login\", data: this.utf8_to_b64(this.form.user) }));\r\n            this.ws.send(JSON.stringify({ type: \"password\", data: this.utf8_to_b64(this.form.pwd) }));\r\n            this.term.reset()\r\n            setTimeout(() => {\r\n                this.resizeRemoteTerminal()\r\n            }, 500)\r\n        }\r\n        },\r\n\r\n        // 关闭连接\r\n        onCloseSocket() {\r\n            this.ws.onclose = () => {\r\n                this.term.write('未连接， 刷新后重连...\\r\\n');\r\n                // setTimeout(() => {\r\n                //   this.initSocket();\r\n                // }, 3000)\r\n            }\r\n        },\r\n        // 连接错误\r\n        onErrorSocket() {\r\n            this.ws.onerror = () => {\r\n                this.term.write('连接失败，请刷新！')\r\n            }\r\n        },\r\n        // 接收消息\r\n        onMessageSocket() {\r\n        this.ws.onmessage = res => {\r\n            console.log(res)\r\n            const msg = JSON.parse(res.data)\r\n            const term = this.term\r\n            // console.log(\"receive: \" + data)\r\n            // 第一次连接成功将 initText 清空\r\n            if (this.first) {\r\n                this.first = false\r\n                term.reset()\r\n                term.element && term.focus()\r\n                this.resizeRemoteTerminal()\r\n            }\r\n            term.write(this.b64_to_utf8(msg.data))\r\n        }\r\n        }\r\n    }\r\n}\r\n//\r\n</script>\r\n<style lang=\"scss\">\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.ssh-container {\r\n    overflow: hidden;\r\n    height: 85vh;\r\n    border-radius: 4px;\r\n    background: rgb(255, 255, 255);\r\n    padding: 0px;\r\n    //color: rgb(0, 0, 0);\r\n\r\n    .xterm-scroll-area::-webkit-scrollbar-thumb {\r\n        background-color: #b7c4d1;\r\n        /* 滚动条的背景颜色 */\r\n    }\r\n}\r\n</style>"],"mappings":";;EAIiBA,KAA0B,EAA1B;IAAA;EAAA;AAA0B;;EAsB1BC,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;;;;;;;uBAzBvCC,mBAAA,CA4BM,cA3BFC,YAAA,CA0BUC,kBAAA;gBA1BQC,KAAA,CAAAC,UAAU;+DAAVD,KAAA,CAAAC,UAAU,GAAAC,MAAA;IAAGC,UAAS,EAAEC,QAAA,CAAAC,WAAW;IAAEX,KAA2C,EAA3C;MAAA;MAAA;IAAA;;sBACvD,MAqBc,CArBdI,YAAA,CAqBcQ,sBAAA;MArBDC,IAAI,EAAC,OAAO;MAACC,KAAK,EAAC;;wBAC5B,MAmBM,CAnBNC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBFZ,YAAA,CAiBUa,kBAAA;QAjBDf,GAAG,EAAC,MAAM;QAAEgB,KAAK,EAAEZ,KAAA,CAAAa,IAAI;QAAE,aAAW,EAAX,EAAW;QAAEC,KAAK,EAAEd,KAAA,CAAAc,KAAK;QAAE,gBAAc,EAAC,MAAM;QAAC,aAAW,EAAC,MAAM;QAACpB,KAAsC,EAAtC;UAAA;UAAA;QAAA;;0BAClG,MAEe,CAFfI,YAAA,CAEeiB,uBAAA;UAFDP,KAAK,EAAC,MAAM;UAACQ,IAAI,EAAC;;4BAC5B,MAA6B,CAA7BlB,YAAA,CAA6BmB,mBAAA;wBAAVjB,KAAA,CAAAa,IAAI,CAACK,EAAE;uEAAPlB,KAAA,CAAAa,IAAI,CAACK,EAAE,GAAAhB,MAAA;;;YAE9BJ,YAAA,CAEeiB,uBAAA;UAFDP,KAAK,EAAC,IAAI;UAACQ,IAAI,EAAC;;4BAC1B,MAA+B,CAA/BlB,YAAA,CAA+BmB,mBAAA;wBAAZjB,KAAA,CAAAa,IAAI,CAACM,IAAI;uEAATnB,KAAA,CAAAa,IAAI,CAACM,IAAI,GAAAjB,MAAA;;;YAEhCJ,YAAA,CAEeiB,uBAAA;UAFDP,KAAK,EAAC,KAAK;UAACQ,IAAI,EAAC;;4BAC3B,MAA+B,CAA/BlB,YAAA,CAA+BmB,mBAAA;wBAAZjB,KAAA,CAAAa,IAAI,CAACO,IAAI;uEAATpB,KAAA,CAAAa,IAAI,CAACO,IAAI,GAAAlB,MAAA;;;YAEhCJ,YAAA,CAEeiB,uBAAA;UAFDP,KAAK,EAAC,IAAI;UAACQ,IAAI,EAAC;;4BAC1B,MAA+B,CAA/BlB,YAAA,CAA+BmB,mBAAA;wBAAZjB,KAAA,CAAAa,IAAI,CAACQ,GAAG;uEAARrB,KAAA,CAAAa,IAAI,CAACQ,GAAG,GAAAnB,MAAA;;;YAE/BJ,YAAA,CAGeiB,uBAAA;4BAFX,MAAoE,CAApEjB,YAAA,CAAoEwB,oBAAA;YAAzDC,IAAI,EAAC,SAAS;YAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAvB,MAAA,IAAEE,QAAA,CAAAsB,UAAU;;8BAAU,MAAE,C,iBAAF,IAAE,E;;cACxD5B,YAAA,CAAoDwB,oBAAA;YAAxCE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAvB,MAAA,IAAEE,QAAA,CAAAuB,SAAS;;8BAAU,MAAE,C,iBAAF,IAAE,E;;;;;;;;;;QAKxD7B,YAAA,CAEcQ,sBAAA;MAFDC,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAC;;wBAC7B,MAAgD,CAAhDC,mBAAA,CAAgD,OAAhDmB,UAAgD,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}