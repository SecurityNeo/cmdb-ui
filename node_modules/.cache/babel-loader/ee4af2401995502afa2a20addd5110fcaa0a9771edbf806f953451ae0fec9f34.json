{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"text-align\": \"center\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"ssh-container\",\n  ref: \"terminal\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_tab_pane = _resolveComponent(\"el-tab-pane\");\n  const _component_el_tabs = _resolveComponent(\"el-tabs\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_tabs, {\n    modelValue: $setup.activeName,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $setup.activeName = $event),\n    onTabClick: $setup.handleClick,\n    style: {\n      \"margin-left\": \"1vh\",\n      \"margin-right\": \"1vh\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_tab_pane, {\n      name: \"first\",\n      label: \"连接配置\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_el_form, {\n        ref: \"form\",\n        model: _ctx.form,\n        \"status-icon\": \"\",\n        \"label-position\": \"left\",\n        \"label-width\": \"80px\",\n        style: {\n          \"margin-left\": \"50vh\",\n          \"width\": \"50vh\"\n        }\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_form_item, {\n          label: \"IP地址：\",\n          prop: \"ip\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: _ctx.ip,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.ip = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, {\n          label: \"端口号：\",\n          prop: \"port\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: _ctx.port,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.port = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, {\n          label: \"用户名：\",\n          prop: \"user\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: _ctx.user,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.user = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, {\n          label: \"密码：\",\n          prop: \"pwd\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            modelValue: _ctx.pwd,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.pwd = $event),\n            type: \"password\"\n          }, null, 8 /* PROPS */, [\"modelValue\"])]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_el_form_item, null, {\n          default: _withCtx(() => [_createVNode(_component_el_button, {\n            type: \"primary\",\n            onClick: _cache[4] || (_cache[4] = $event => $setup.submitWebSsh(_ctx.form))\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"连接\")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_button, {\n            onClick: _cache[5] || (_cache[5] = $event => $setup.resetWebSsh(_ctx.form))\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"重置\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\"])])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_tab_pane, {\n      name: \"second\",\n      label: \"终端\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onTabClick\"])]);\n}","map":{"version":3,"names":["style","class","ref","_createElementBlock","_createVNode","_component_el_tabs","$setup","activeName","$event","onTabClick","handleClick","_component_el_tab_pane","name","label","_createElementVNode","_hoisted_1","_component_el_form","model","_ctx","form","_component_el_form_item","prop","_component_el_input","ip","port","user","pwd","type","_component_el_button","onClick","_cache","submitWebSsh","resetWebSsh","_hoisted_2"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\resource\\vm\\components\\webssh-dialog.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\" style=\"margin-left: 1vh; margin-right: 1vh\">\r\n        <el-tab-pane name=\"first\" label=\"连接配置\">\r\n          <div style=\"text-align: center\">\r\n            <el-form ref=\"form\" :model=\"form\" status-icon label-position=\"left\" label-width=\"80px\" style=\"margin-left: 50vh; width: 50vh\">\r\n              <el-form-item label=\"IP地址：\" prop=\"ip\">\r\n                <el-input v-model=\"ip\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"端口号：\" prop=\"port\">\r\n                <el-input v-model=\"port\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"用户名：\" prop=\"user\">\r\n                <el-input v-model=\"user\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"密码：\" prop=\"pwd\">\r\n                <el-input v-model=\"pwd\" type=\"password\"/>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button type=\"primary\" @click=\"submitWebSsh(form)\">连接</el-button>\r\n                <el-button @click=\"resetWebSsh(form)\">重置</el-button>\r\n              </el-form-item>\r\n            </el-form>\r\n          </div>\r\n        </el-tab-pane>\r\n        <el-tab-pane name=\"second\" label=\"终端\">\r\n          <div class=\"ssh-container\" ref=\"terminal\"></div>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport { reactive, ref, toRefs } from 'vue'\r\nimport { Terminal } from 'xterm'\r\nimport { FitAddon } from 'xterm-addon-fit'\r\nimport 'xterm/css/xterm.css'\r\nimport { debounce } from 'lodash'\r\n\r\n\r\nexport default {\r\n    setup(){\r\n        const packResize = (cols, rows) =>\r\n            JSON.stringify({\r\n            type: 'resize',\r\n            cols: cols,\r\n            rows: rows\r\n        })\r\n\r\n        const form = reactive({\r\n            ip: \"\",\r\n            port: 22,\r\n            user: \"root\",\r\n            password: \"\",\r\n        })\r\n        const term = ref()\r\n        const fitAddon = new FitAddon()\r\n        const terminal = ref(null)\r\n        let terminalSocket = ref(null);\r\n        const initText = \"正在努力连接...\\r\\n\"\r\n        const socketUrl = \"ws://10.210.20.33:18080/api/v1/resource/vm/ssh\"\r\n        const ws = ref(null)\r\n        const first = ref(true)\r\n        let activeName = \"first\"\r\n\r\n\r\n        // const validate = (rule, value, callback)=> {\r\n        //     if (value === '') {\r\n        //         callback(new Error('内容不能为空'));\r\n        //     } else {\r\n        //         callback();\r\n        //     }\r\n        // }\r\n\r\n        // const rules =  {\r\n        //     ip: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        //     port: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        //     user: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        //     pwd: [\r\n        //         {validator: validate, trigger: 'blur'}\r\n        //     ],\r\n        // }\r\n\r\n        const fitTerm = () => {\r\n            fitAddon.fit();\r\n        }\r\n\r\n\r\n        const initWs = ()=> {\r\n            initTerm()\r\n            initSocket()\r\n            onTerminalResize()\r\n            onTerminalKeyPress()\r\n        }\r\n\r\n        const onResize = debounce(() => fitTerm(), 500);\r\n\r\n        function resizeRemoteTerminal() {\r\n            const { cols, rows } = term\r\n            console.log('列数、行数设置为：', cols, rows)\r\n            // 调整后端终端大小 使后端与前端终端大小一致\r\n            isWsOpen() && ws.value.send(packResize(cols, rows))\r\n        } \r\n\r\n        function onTerminalResize() {\r\n            window.addEventListener('resize', onResize)\r\n            term.value.onResize(resizeRemoteTerminal)\r\n        }\r\n        function removeResizeListener() {\r\n            window.removeEventListener('resize', onResize)\r\n        }\r\n\r\n        // 打开连接\r\n        const onOpenSocket = ()=> {\r\n            ws.value.onopen = () => {\r\n                ws.value.send(JSON.stringify({ type: \"addr\", data: utf8_to_b64(form.ip + ':' + form.port) }));\r\n                // socket.send(JSON.stringify({ type: \"term\", data: utf8_to_b64(\"linux\") }));\r\n                ws.value.send(JSON.stringify({ type: \"login\", data: utf8_to_b64(form.user) }));\r\n                ws.value.send(JSON.stringify({ type: \"password\", data: utf8_to_b64(form.pwd) }));\r\n                term.value.reset()\r\n                setTimeout(() => {\r\n                    resizeRemoteTerminal()\r\n                }, 500)\r\n            }\r\n        }\r\n        // 关闭连接\r\n        const onCloseSocket = ()=> {\r\n            ws.value.onclose = () => {\r\n                term.value.write('连接未成功，请刷新页面后重新连接...\\r\\n');\r\n            }\r\n        }\r\n\r\n        // 连接错误\r\n        const onErrorSocket = () => {\r\n            ws.value.onerror = () => {\r\n                term.write(\"连接失败，请刷新页面后重新连接...\\r\\n\")\r\n            }\r\n        }\r\n\r\n        // 接受消息\r\n        const  onMessageSocket = ()=> {\r\n            ws.value.onmessage = res => {\r\n                const msg = JSON.parse(res.data)\r\n                const term = term\r\n                // 首次连接成功将initText清空\r\n                if (first.value) {\r\n                    first.value = false\r\n                    term.value.reset()\r\n                    term.value.element && term.value.focus()\r\n                    resizeRemoteTerminal()\r\n                }\r\n                term.write(b64_to_utf8(msg.data))\r\n            }\r\n        }\r\n\r\n\r\n        const initTerm = () => {\r\n            term.value = new Terminal({\r\n                lineHeight: 1.2,\r\n                fontSize: 12,\r\n                fontFamily: \"Monaco, Menlo, Consolas, 'Courier New', monospace\",\r\n                theme: {\r\n                    // 背景色\r\n                    background: '#ffffff',\r\n                    // 前景色\r\n                    foreground: '#000000',\r\n                    // 光标背景色\r\n                    cursor: '#000000',\r\n                    // 光标前景色\r\n                    /** The accent color of the cursor (fg color for a block cursor) */\r\n                    // cursorAccent: '#000000',\r\n                    // 选择背景色\r\n                    /** The selection background color (can be transparent) */\r\n                    selection: '#0000ff',\r\n                    // 选择前景色\r\n                    /** The selection foreground color */\r\n                    selectionForeground: '#0000ff'\r\n                },\r\n                // 光标闪烁\r\n                cursorBlink: true,\r\n                // 光标样式 'block' | 'underline' | 'bar'\r\n                cursorStyle: 'block',\r\n                scrollback: 100,\r\n                tabStopWidth: 4,\r\n                cols: 30 // 初始化的时候不要设置fit，设置col为较小值（最小为可展示initText初始文字即可）方便屏幕缩放\r\n            })\r\n            term.value.loadAddon(fitAddon)\r\n            term.value.open(terminal.value)\r\n            // 不能初始化的时候fit,需要等terminal准备就绪\r\n            // fitAddon.fit()\r\n            // 必须设置延迟\r\n            setTimeout(() => {\r\n                this.fitAddon.fit()\r\n            }, 500);\r\n        }\r\n\r\n        const isWsOpen = () => {\r\n            const readyState = terminalSocket.value && terminalSocket.value.readyState;\r\n            return readyState === 1\r\n        }\r\n\r\n        const onTerminalKeyPress = ()=> {\r\n            term.value.onData(data => {\r\n                isWsOpen() && ws.value.send(JSON.stringify({\r\n                    type: 'stdin',\r\n                    data: utf8_to_b64(data)\r\n                }))\r\n            })\r\n        }\r\n\r\n        const initSocket = () => {\r\n            term.value.write(initText)\r\n            terminalSocket.value = new WebSocket(socketUrl,['webssh'])\r\n            terminalSocket.value.onopen = onOpenSocket()\r\n            terminalSocket.value.onclose = onCloseSocket()\r\n            terminalSocket.value.onerror = onErrorSocket()\r\n            term.value._initialized = true\r\n            terminalSocket.value.onmessage = onMessageSocket() \r\n        }\r\n\r\n\r\n        // function bytesHuman(bytes, precision) {\r\n        //     if (!/^([-+])?|(\\.\\d+)(\\d+(\\.\\d+)?|(\\d+\\.)|Infinity)$/.test(bytes)) {\r\n        //         return '-'\r\n        //     }\r\n        //     if (bytes === 0) return '0';\r\n        //     if (typeof precision === 'undefined') precision = 1;\r\n        //     const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'BB'];\r\n        //     const num = Math.floor(Math.log(bytes) / Math.log(1024));\r\n        //     const value = (bytes / Math.pow(1024, Math.floor(num))).toFixed(precision);\r\n        //     return `${value} ${units[num]}`\r\n        // }\r\n\r\n        function utf8_to_b64(rawString) {\r\n            return btoa(unescape(encodeURIComponent(rawString)));\r\n        }\r\n\r\n        function b64_to_utf8(encodeString) {\r\n            return decodeURIComponent(escape(atob(encodeString)));\r\n        }\r\n\r\n        const submitWebSsh = (formname) => {\r\n            formname.validate((valid) => {\r\n                if (valid) {\r\n                    activeName = 'second'\r\n                    initWs()\r\n                } else {\r\n                    return false;\r\n                }\r\n            })\r\n        }\r\n        \r\n        const resetWebSsh = (formname)=> {\r\n            formname.resetFields()\r\n        }\r\n\r\n        const handleClick = (tab, event)=> {\r\n            if (tab.name === 'second') {\r\n                // this.init()\r\n            }\r\n        }\r\n        \r\n        return {\r\n            activeName,\r\n            //rules,\r\n            ...toRefs(form),\r\n            submitWebSsh,\r\n            resetWebSsh,\r\n            handleClick\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n</script>\r\n<style lang=\"scss\">\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.ssh-container {\r\n    overflow: hidden;\r\n    height: 85vh;\r\n    border-radius: 4px;\r\n    background: rgb(255, 255, 255);\r\n    padding: 0px;\r\n    //color: rgb(0, 0, 0);\r\n\r\n    .xterm-scroll-area::-webkit-scrollbar-thumb {\r\n        background-color: #b7c4d1;\r\n        /* 滚动条的背景颜色 */\r\n    }\r\n}\r\n</style>"],"mappings":";;EAIeA,KAA0B,EAA1B;IAAA;EAAA;AAA0B;;EAsB1BC,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;;;;;;;uBAzBrCC,mBAAA,CA4BM,cA3BJC,YAAA,CA0BUC,kBAAA;gBA1BQC,MAAA,CAAAC,UAAU;+DAAVD,MAAA,CAAAC,UAAU,GAAAC,MAAA;IAAGC,UAAS,EAAEH,MAAA,CAAAI,WAAW;IAAEV,KAA2C,EAA3C;MAAA;MAAA;IAAA;;sBACrD,MAqBc,CArBdI,YAAA,CAqBcO,sBAAA;MArBDC,IAAI,EAAC,OAAO;MAACC,KAAK,EAAC;;wBAC9B,MAmBM,CAnBNC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJX,YAAA,CAiBUY,kBAAA;QAjBDd,GAAG,EAAC,MAAM;QAAEe,KAAK,EAAEC,IAAA,CAAAC,IAAI;QAAE,aAAW,EAAX,EAAW;QAAC,gBAAc,EAAC,MAAM;QAAC,aAAW,EAAC,MAAM;QAACnB,KAAsC,EAAtC;UAAA;UAAA;QAAA;;0BACrF,MAEe,CAFfI,YAAA,CAEegB,uBAAA;UAFDP,KAAK,EAAC,OAAO;UAACQ,IAAI,EAAC;;4BAC/B,MAAwB,CAAxBjB,YAAA,CAAwBkB,mBAAA;wBAALJ,IAAA,CAAAK,EAAE;uEAAFL,IAAA,CAAAK,EAAE,GAAAf,MAAA;;;YAEvBJ,YAAA,CAEegB,uBAAA;UAFDP,KAAK,EAAC,MAAM;UAACQ,IAAI,EAAC;;4BAC9B,MAA0B,CAA1BjB,YAAA,CAA0BkB,mBAAA;wBAAPJ,IAAA,CAAAM,IAAI;uEAAJN,IAAA,CAAAM,IAAI,GAAAhB,MAAA;;;YAEzBJ,YAAA,CAEegB,uBAAA;UAFDP,KAAK,EAAC,MAAM;UAACQ,IAAI,EAAC;;4BAC9B,MAA0B,CAA1BjB,YAAA,CAA0BkB,mBAAA;wBAAPJ,IAAA,CAAAO,IAAI;uEAAJP,IAAA,CAAAO,IAAI,GAAAjB,MAAA;;;YAEzBJ,YAAA,CAEegB,uBAAA;UAFDP,KAAK,EAAC,KAAK;UAACQ,IAAI,EAAC;;4BAC7B,MAAyC,CAAzCjB,YAAA,CAAyCkB,mBAAA;wBAAtBJ,IAAA,CAAAQ,GAAG;uEAAHR,IAAA,CAAAQ,GAAG,GAAAlB,MAAA;YAAEmB,IAAI,EAAC;;;YAE/BvB,YAAA,CAGegB,uBAAA;4BAFb,MAAoE,CAApEhB,YAAA,CAAoEwB,oBAAA;YAAzDD,IAAI,EAAC,SAAS;YAAEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAtB,MAAA,IAAEF,MAAA,CAAAyB,YAAY,CAACb,IAAA,CAAAC,IAAI;;8BAAG,MAAE,C,iBAAF,IAAE,E;;cACxDf,YAAA,CAAoDwB,oBAAA;YAAxCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAtB,MAAA,IAAEF,MAAA,CAAA0B,WAAW,CAACd,IAAA,CAAAC,IAAI;;8BAAG,MAAE,C,iBAAF,IAAE,E;;;;;;;;;;QAKhDf,YAAA,CAEcO,sBAAA;MAFDC,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAC;;wBAC/B,MAAgD,CAAhDC,mBAAA,CAAgD,OAAhDmB,UAAgD,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}