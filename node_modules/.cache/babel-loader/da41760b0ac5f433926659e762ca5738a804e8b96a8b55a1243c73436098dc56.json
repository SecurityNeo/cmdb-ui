{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, onMounted, getCurrentInstance } from 'vue';\nimport { Delete } from '@element-plus/icons-vue';\nimport qs from 'qs';\nexport default {\n  components: {\n    Delete,\n    onMounted\n  },\n  setup() {\n    const {\n      proxy\n    } = getCurrentInstance();\n    const config = reactive({\n      input_block: [{}],\n      input_template: {\n        src_netdevice_id: 0,\n        src_interface_name: \"\",\n        target_netdevice_id: null,\n        target_interface_name: \"\"\n      },\n      centerDialogVisible: true,\n      isLoading: false\n    });\n    const input_template = {\n      src_netdevice_id: 0,\n      src_interface_name: \"\",\n      target_netdevice_id: null,\n      target_interface_name: \"\"\n    };\n    const networks = reactive({\n      networks_arr: []\n    });\n    const interfaceTopologyDetail = reactive({\n      interfaceTopologyDetail: []\n    });\n    onMounted(() => {\n      getNetworkList();\n    });\n    // 查询网络设备列表\n    const getNetworkList = async () => {\n      const query = qs.stringify({\n        page: 1,\n        size: 1000\n      });\n      try {\n        const rest = await new proxy.$request(proxy.$urls.m().networkslist + \"?\" + query).modeget();\n        if (rest.data.code !== 200) {\n          new proxy.$tips(\"获取网络设备列表失败\", \"warning\").notify();\n        }\n        networks.networks_arr = rest.data.data;\n      } catch (e) {\n        console.log(e);\n        if (e.code !== 401) {\n          new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify();\n        }\n      }\n    };\n    const addInterfaceTopo = () => {\n      console.log(\"addInterfaceTopo\");\n    };\n    const addContent = () => {\n      config.input_block.push({\n        src_netdevice_id: 0,\n        src_interface_name: \"\",\n        target_netdevice_id: null,\n        target_interface_name: \"\"\n      });\n      console.log(input_template);\n      console.log(config.input_block);\n    };\n    const deleteContent = index => {\n      console.log(index);\n      config.input_block.splice(index, 1);\n      console.log(config.input_block);\n    };\n    const addInterfaceTopoDialog = srcNetworksId => {\n      config.centerDialogVisible = true;\n      config.input_template.src_netdevice_id = srcNetworksId;\n    };\n    return {\n      config,\n      networks,\n      Delete,\n      addContent,\n      deleteContent,\n      interfaceTopologyDetail,\n      addInterfaceTopoDialog,\n      addInterfaceTopo\n    };\n  }\n};","map":{"version":3,"names":["reactive","onMounted","getCurrentInstance","Delete","qs","components","setup","proxy","config","input_block","input_template","src_netdevice_id","src_interface_name","target_netdevice_id","target_interface_name","centerDialogVisible","isLoading","networks","networks_arr","interfaceTopologyDetail","getNetworkList","query","stringify","page","size","rest","$request","$urls","m","networkslist","modeget","data","code","$tips","notify","e","console","log","addInterfaceTopo","addContent","push","deleteContent","index","splice","addInterfaceTopoDialog","srcNetworksId"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\resource\\networks\\components\\addinterfacetopo-dialog.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-dialog\r\n            v-model=\"config.centerDialogVisible\"\r\n            title=\"添加网络设备接线信息\"\r\n            width=\"50%\"\r\n            align-center\r\n            :close-on-click-modal=\"false\"           \r\n        >\r\n\r\n            <div>\r\n                <div  v-for=\"(item,index) in config.input_block\" :key=\"index\" class=\"topo_block\" >\r\n                    <div style=\"display: flex;\">\r\n                        <div class=\"topo_title\" style=\"width: 200px;\">本端接口名称</div>\r\n                        <div class=\"topo_title\" style=\"width: 300px;\">对端设备</div>\r\n                        <div class=\"topo_title\" style=\"width: 200px;\">对端接口名称</div>\r\n                    </div>\r\n                    <div style=\"display: flex; margin-bottom: 10px;\">\r\n                        <div class=\"topo_value\">\r\n                            <el-input v-model=\"item.src_interface_name\" autosize  clearable class=\"inputflex\"  placeholder=\"请输入本端接口名称\"  />\r\n                        </div>\r\n                        <div class=\"topo_value\" style=\"width: 280px;\">\r\n                            <el-select v-model=\"item.target_netdevice_id\" value-key=\"id\" placeholder=\"请选择对端网络设备\">\r\n                                <el-option\r\n                                    v-for=\"networks_item in networks.networks_arr\"\r\n                                    :key=\"networks_item.id\"\r\n                                    :label=\"networks_item.host_name\"\r\n                                    :value=\"networks_item.id\"\r\n                                    >\r\n\r\n                                    <span style=\"float: left\">{{ networks_item.host_name }}</span>\r\n                                    <span\r\n                                        style=\"float: right;color: var(--el-text-color-secondary);font-size: 11px;\"\r\n                                        >{{ networks_item.product_name }}</span>\r\n                                </el-option>\r\n                            </el-select>\r\n                        </div >\r\n                        <div class=\"topo_value\">\r\n                            <el-input v-model=\"item.target_interface_name\" autosize  clearable class=\"inputflex\"  placeholder=\"请输入对端接口名称\"  />\r\n                        </div>\r\n                        <div>\r\n                            <el-button  @click=\"deleteContent(index)\" size=\"small\" style=\"margin-top: 3px;\">删除</el-button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style=\"margin-top: 15px;\">\r\n                    <el-button  @click=\"addContent\">添加</el-button>\r\n                </div>\r\n                \r\n\r\n                \r\n                <div style=\"float: right; margin-bottom: 40px; margin-right: 72px;margin-top: 20px;\">\r\n                    <el-button @click=\"config.centerDialogVisible = false\">取消</el-button>\r\n                    <el-button type=\"primary\" :loading=\"config.isLoading\" @click=\"addInterfaceTopo\" >确认</el-button>\r\n                </div>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive, onMounted, getCurrentInstance } from 'vue'\r\nimport {Delete} from '@element-plus/icons-vue'\r\nimport qs from 'qs'\r\n\r\nexport default ({\r\n    components: {\r\n        Delete,\r\n        onMounted\r\n    },\r\n    setup() {\r\n        const {proxy} = getCurrentInstance()\r\n        const config = reactive({\r\n            input_block: [{}],\r\n            input_template: {\r\n                src_netdevice_id: 0,\r\n                src_interface_name: \"\",\r\n                target_netdevice_id: null,\r\n                target_interface_name: \"\"\r\n            },\r\n            centerDialogVisible: true,\r\n            isLoading: false\r\n        })\r\n        const input_template = {\r\n                src_netdevice_id: 0,\r\n                src_interface_name: \"\",\r\n                target_netdevice_id: null,\r\n                target_interface_name: \"\"\r\n            }\r\n        const networks = reactive({\r\n            networks_arr: []\r\n        })\r\n        const interfaceTopologyDetail = reactive({\r\n            interfaceTopologyDetail: []\r\n        })\r\n\r\n        onMounted(()=>{\r\n            getNetworkList()\r\n        })\r\n        // 查询网络设备列表\r\n        const getNetworkList = async()=> {\r\n            const query = qs.stringify({\r\n                page: 1,\r\n                size: 1000\r\n            })\r\n            try {\r\n                const rest = await new proxy.$request(proxy.$urls.m().networkslist + \"?\" + query).modeget()\r\n                \r\n                if (rest.data.code !== 200 ) {\r\n                    new proxy.$tips(\"获取网络设备列表失败\", \"warning\").notify()\r\n                }\r\n                networks.networks_arr = rest.data.data\r\n                \r\n            } catch (e) {\r\n                console.log(e);\r\n                if (e.code !== 401) {\r\n                    new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n                }     \r\n            }\r\n\r\n        }\r\n\r\n        const addInterfaceTopo = ()=> {\r\n            console.log(\"addInterfaceTopo\")\r\n        }\r\n\r\n        const addContent = ()=> {\r\n            config.input_block.push({\r\n                src_netdevice_id: 0,\r\n                src_interface_name: \"\",\r\n                target_netdevice_id: null,\r\n                target_interface_name: \"\"\r\n            })\r\n            console.log(input_template);\r\n            console.log(config.input_block);\r\n        }\r\n\r\n        const deleteContent = (index)=> {\r\n            console.log(index);\r\n            config.input_block.splice(index, 1)\r\n            console.log(config.input_block);\r\n        }\r\n\r\n\r\n        const addInterfaceTopoDialog = (srcNetworksId) => {\r\n            config.centerDialogVisible= true\r\n            config.input_template.src_netdevice_id = srcNetworksId\r\n        }\r\n        \r\n        return {\r\n            config,\r\n            networks,\r\n            Delete,\r\n            addContent,\r\n            deleteContent,\r\n            interfaceTopologyDetail,\r\n            addInterfaceTopoDialog,\r\n            addInterfaceTopo\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n})\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}