{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, vShow as _vShow, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"text-align\": \"center\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"ssh-container\",\n  ref: \"terminal\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_el_form, {\n    ref: \"form\",\n    model: _ctx.formData,\n    \"status-icon\": \"\",\n    \"label-position\": \"left\",\n    \"label-width\": \"80px\",\n    style: {\n      \"margin-left\": \"50vh\",\n      \"width\": \"50vh\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_form_item, {\n      label: \"IP地址\",\n      prop: \"ip\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: _ctx.formData.ip,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.formData.ip = $event)\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, {\n      label: \"端口号\",\n      prop: \"port\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: _ctx.formData.port,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.formData.port = $event)\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, {\n      label: \"用户名\",\n      prop: \"user\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: _ctx.formData.user,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.formData.user = $event)\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, {\n      label: \"密码\",\n      prop: \"pwd\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: _ctx.formData.pwd,\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.formData.pwd = $event),\n        type: \"password\",\n        \"show-password\": \"\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, null, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[4] || (_cache[4] = $event => $setup.submitForm())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"连接\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        onClick: _cache[5] || (_cache[5] = $event => $setup.resetForm('form'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"重置\")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model\"])], 512 /* NEED_PATCH */), [[_vShow, _ctx.source !== 'other']]), _withDirectives(_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */), [[_vShow, _ctx.source === 'other']])]);\n}","map":{"version":3,"names":["style","class","ref","_createElementBlock","_createElementVNode","_hoisted_1","_createVNode","_component_el_form","model","_ctx","formData","_component_el_form_item","label","prop","_component_el_input","ip","$event","port","user","pwd","type","_component_el_button","onClick","_cache","$setup","submitForm","resetForm","source","_hoisted_2"],"sources":["D:\\src\\github.com\\SecurityNeo\\cmdb-ui\\src\\page\\webssh\\webssh.vue"],"sourcesContent":["<template>\r\n  <div>\r\n      <div style=\"text-align: center\" v-show=\"source !== 'other'\">\r\n          <el-form ref=\"form\" :model=\"formData\" status-icon label-position=\"left\" label-width=\"80px\" style=\"margin-left: 50vh; width: 50vh\">\r\n            <el-form-item label=\"IP地址\" prop=\"ip\">\r\n              <el-input v-model=\"formData.ip\"/>\r\n            </el-form-item>\r\n            <el-form-item label=\"端口号\" prop=\"port\">\r\n              <el-input v-model=\"formData.port\"/>\r\n            </el-form-item>\r\n            <el-form-item label=\"用户名\" prop=\"user\">\r\n              <el-input v-model=\"formData.user\"/>\r\n            </el-form-item>\r\n            <el-form-item label=\"密码\" prop=\"pwd\">\r\n              <el-input v-model=\"formData.pwd\" type=\"password\" show-password/>\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button type=\"primary\" @click=\"submitForm()\">连接</el-button>\r\n              <el-button @click=\"resetForm('form')\">重置</el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n        </div>\r\n        <div class=\"ssh-container\" ref=\"terminal\" v-show=\"source === 'other'\"></div>\r\n\r\n  </div>\r\n</template>+\r\n\r\n<script>\r\nimport { Terminal } from 'xterm'\r\nimport { FitAddon } from 'xterm-addon-fit'\r\nimport 'xterm/css/xterm.css'\r\nimport { debounce } from 'lodash'\r\nimport { getCurrentInstance, reactive,onBeforeUnmount,onUnmounted,onMounted, toRefs,ref  } from 'vue'\r\nimport { useRoute } from 'vue-router';\r\n\r\n\r\n\r\n\r\nexport default {\r\n  setup() {\r\n    const route = useRoute()\r\n    const terminal = ref()\r\n    onBeforeUnmount(()=>{\r\n      removeResizeListener()\r\n      config.term && config.term.dispose()\r\n      config.ws.send(JSON.stringify({\r\n        type: 'stdin',\r\n        data: utf8_to_b64('exit')\r\n      }))\r\n    })\r\n\r\n    onUnmounted(()=>{\r\n      config.ws.send(JSON.stringify({\r\n          type: 'stdin',\r\n          data: utf8_to_b64('exit')\r\n        }))\r\n    }) \r\n\r\n    onMounted(()=>{\r\n      \r\n      config.source = route.query.source\r\n      config.type = route.query.type\r\n      config.id = route.query.id\r\n\r\n      if (config.source === 'plat') {\r\n        if (config.type === 'vm') {\r\n          // 调用虚拟机详情接口查询登录信息\r\n          getVmDetail()\r\n        } else if ( config.type === 'host') {\r\n          // 调用物理机详情接口查询登录信息\r\n\r\n        }\r\n      }    \r\n    })\r\n    \r\n    const {proxy} = getCurrentInstance()\r\n    \r\n\r\n    const packResize = (cols, rows) =>\r\n      JSON.stringify({\r\n        type: 'resize',\r\n        cols: cols,\r\n        rows: rows\r\n    })\r\n\r\n    const validate = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('不能为空'));\r\n      } else {\r\n        callback();\r\n      }\r\n    }\r\n  \r\n    const config = reactive({\r\n      id: 0,\r\n      source: 'other',\r\n      type: '',\r\n      rules: {\r\n          ip: [\r\n            {validator: validate, trigger: 'blur'}\r\n          ],\r\n          port: [\r\n            {validator: validate, trigger: 'blur'}\r\n          ],\r\n          user: [\r\n            {validator: validate, trigger: 'blur'}\r\n          ],\r\n          pwd: [\r\n            {validator: validate, trigger: 'blur'}\r\n          ],\r\n        },\r\n      // activeName: 'first',\r\n      initText: '正在努力连接中...\\r\\n',\r\n      first: true,\r\n      term: null,\r\n      fitAddon: null,\r\n      ws: null,\r\n      socketUrl: proxy.$urls.m().ws,\r\n      formData: {\r\n        user: 'root',\r\n        pwd: '',\r\n        ip: '',\r\n        port: '22',\r\n      },\r\n      option: {\r\n        lineHeight: 1.0,\r\n        cursorBlink: true,\r\n        cursorStyle: 'block', // 光标样式 'block' | 'underline' | 'bar'\r\n        fontSize: 15,\r\n        // fontcolor: '#000000',\r\n        fontFamily: \"Monaco, Menlo, Consolas, 'Courier New', monospace\",\r\n        theme: {\r\n          // 背景色\r\n          background: '#ffffff',\r\n          // 前景色\r\n          foreground: '#000000',\r\n          // 光标背景色\r\n          cursor: '#000000',\r\n          // 光标前景色\r\n          /** The accent color of the cursor (fg color for a block cursor) */\r\n          // cursorAccent: '#000000',\r\n          // 选择背景色\r\n          /** The selection background color (can be transparent) */\r\n          selection: '#0000ff',\r\n          // 选择前景色\r\n          /** The selection foreground color */\r\n          selectionForeground: '#0000ff'\r\n        },\r\n        cols: 30 // 初始化的时候不要设置fit，设置col为较小值（最小为可展示initText初始文字即可）方便屏幕缩放\r\n      }\r\n    })\r\n\r\n    const initWs = ()=> {\r\n        initTerm()\r\n        initSocket()\r\n        onTerminalResize()\r\n        onTerminalKeyPress()\r\n    }\r\n\r\n    const submitForm = ()=> {\r\n      config.activeName = 'second'\r\n      initWs()\r\n      console.log(config.source);\r\n    }\r\n\r\n    const resetForm = (formName)=> {\r\n        formName.value.resetFields();\r\n    }\r\n\r\n    const handleClick = (tab, event)=> {\r\n        if (tab.name === 'second') {\r\n          // this.init()\r\n        }\r\n    }\r\n\r\n    function utf8_to_b64(rawString) {\r\n        return btoa(unescape(encodeURIComponent(rawString)));\r\n    }\r\n\r\n    function b64_to_utf8(encodeString) {\r\n        return decodeURIComponent(escape(atob(encodeString)));\r\n    }\r\n\r\n    function  bytesHuman(bytes, precision) {\r\n        if (!/^([-+])?|(\\.\\d+)(\\d+(\\.\\d+)?|(\\d+\\.)|Infinity)$/.test(bytes)) {\r\n          return '-'\r\n        }\r\n        if (bytes === 0) return '0';\r\n        if (typeof precision === 'undefined') precision = 1;\r\n        const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'BB'];\r\n        const num = Math.floor(Math.log(bytes) / Math.log(1024));\r\n        const value = (bytes / Math.pow(1024, Math.floor(num))).toFixed(precision);\r\n        return `${value} ${units[num]}`\r\n    }\r\n\r\n    function isWsOpen() {\r\n        return config.ws && config.ws.readyState === 1\r\n    }\r\n    \r\n    const initTerm = ()=> {\r\n        config.term = new Terminal(config.option)\r\n        config.fitAddon = new FitAddon()\r\n        config.term.loadAddon(config.fitAddon)\r\n        config.term.open(terminal.value)\r\n        // config.fitAddon.fit() // 初始化的时候不要使用fit\r\n        setTimeout(() => {\r\n          config.fitAddon.fit()\r\n        }, 500); // 必须延时处理\r\n    }\r\n\r\n    function onTerminalKeyPress() {\r\n        config.term.onData(data => {\r\n          isWsOpen() && config.ws.send(JSON.stringify({\r\n            type: 'stdin',\r\n            data: utf8_to_b64(data)\r\n          }))\r\n        })\r\n    }\r\n\r\n    function resizeRemoteTerminal() {\r\n        const { cols, rows } = config.term\r\n        console.log('列数、行数设置为：', cols, rows)\r\n        // 调整后端终端大小 使后端与前端终端大小一致\r\n        isWsOpen() && config.ws.send(packResize(cols, rows))\r\n      }\r\n    \r\n    const onResize = debounce(function () {\r\n        config.fitAddon.fit()\r\n      }, 500)\r\n  \r\n    function onTerminalResize() {\r\n        window.addEventListener('resize', onResize)\r\n        config.term.onResize(resizeRemoteTerminal)\r\n    }\r\n\r\n    function removeResizeListener() {\r\n        window.removeEventListener('resize', onResize)\r\n    }\r\n\r\n    const initSocket = ()=> {\r\n        config.term.write(config.initText)\r\n        console.log(config.socketUrl)\r\n        config.ws = new WebSocket(config.socketUrl,['webssh'])\r\n        onOpenSocket()\r\n        onCloseSocket()\r\n        onErrorSocket()\r\n        config.term._initialized = true\r\n        onMessageSocket()\r\n    }\r\n\r\n    const onOpenSocket = ()=> {\r\n        config.ws.onopen = () => {\r\n          console.log('websocket 已连接')\r\n          config.ws.send(JSON.stringify({ type: \"addr\", data: utf8_to_b64(config.formData.ip + ':' + config.formData.port) }));\r\n          // socket.send(JSON.stringify({ type: \"term\", data: utf8_to_b64(\"linux\") }));\r\n          config.ws.send(JSON.stringify({ type: \"login\", data: utf8_to_b64(config.formData.user) }));\r\n          config.ws.send(JSON.stringify({ type: \"password\", data: utf8_to_b64(config.formData.pwd) }));\r\n          config.term.reset()\r\n          setTimeout(() => {\r\n            resizeRemoteTerminal()\r\n          }, 500)\r\n        }\r\n    }\r\n\r\n    const onCloseSocket =()=> {\r\n        config.ws.onclose = () => {\r\n          console.log('关闭连接')\r\n          config.term.write('未连接， 刷新后重连...\\r\\n');\r\n        }\r\n    }\r\n    \r\n    const onErrorSocket =()=> {\r\n        config.ws.onerror = () => {\r\n          config.term.write('连接失败，请刷新！')\r\n        }\r\n    }\r\n\r\n    const onMessageSocket = ()=> {\r\n      debugger\r\n      config.source = 'other'\r\n\r\n        config.ws.onmessage = res => {\r\n          console.log(res)\r\n          \r\n          const msg = JSON.parse(res.data)\r\n          const term = config.term\r\n          // console.log(\"receive: \" + data)\r\n          // 第一次连接成功将 initText 清空\r\n          if (config.first) {\r\n            config.first = false\r\n            term.reset()\r\n            term.element && term.focus()\r\n            resizeRemoteTerminal()\r\n          }\r\n          term.write(b64_to_utf8(msg.data))\r\n        }\r\n    }\r\n\r\n\r\n    const getVmDetail = async()=> {\r\n        try {\r\n            const rest = await new proxy.$request(proxy.$urls.m().vmdetail + \"?id=\" + config.id).modeget()\r\n            \r\n            if (rest.data.code !== 200 ) {\r\n                new proxy.$tips(\"获取虚拟机详情失败\", \"warning\").notify()\r\n            }\r\n            config.formData.ip = rest.data.data.mgt_ip\r\n            config.formData.pwd =  rest.data.data.mgt_root_pwd  \r\n            submitForm()       \r\n        } catch (e) {\r\n            console.log(e);\r\n            if (e.code !== 401) {\r\n                new proxy.$tips(\"服务器错误，请稍后重试\", \"error\").notify()\r\n            }     \r\n        }\r\n    }\r\n\r\n    return {\r\n      ...toRefs(config),\r\n      submitForm,\r\n      resetForm,\r\n      handleClick,\r\n      terminal,\r\n      getVmDetail\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n<style lang=\"scss\">\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.ssh-container {\r\n  overflow: hidden;\r\n  height: 85vh;\r\n  border-radius: 4px;\r\n  background: rgb(255, 255, 255);\r\n  padding: 0px;\r\n  //color: rgb(0, 0, 0);\r\n\r\n  .xterm-scroll-area::-webkit-scrollbar-thumb {\r\n    background-color: #b7c4d1;\r\n    /* 滚动条的背景颜色 */\r\n  }\r\n}\r\n</style>"],"mappings":";;EAEWA,KAA0B,EAA1B;IAAA;EAAA;AAA0B;;EAoBxBC,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;;;;;uBArBrCC,mBAAA,CAuBM,c,gBAtBFC,mBAAA,CAmBQ,OAnBRC,UAmBQ,GAlBJC,YAAA,CAiBUC,kBAAA;IAjBDL,GAAG,EAAC,MAAM;IAAEM,KAAK,EAAEC,IAAA,CAAAC,QAAQ;IAAE,aAAW,EAAX,EAAW;IAAC,gBAAc,EAAC,MAAM;IAAC,aAAW,EAAC,MAAM;IAACV,KAAsC,EAAtC;MAAA;MAAA;IAAA;;sBACzF,MAEe,CAFfM,YAAA,CAEeK,uBAAA;MAFDC,KAAK,EAAC,MAAM;MAACC,IAAI,EAAC;;wBAC9B,MAAiC,CAAjCP,YAAA,CAAiCQ,mBAAA;oBAAdL,IAAA,CAAAC,QAAQ,CAACK,EAAE;mEAAXN,IAAA,CAAAC,QAAQ,CAACK,EAAE,GAAAC,MAAA;;;QAEhCV,YAAA,CAEeK,uBAAA;MAFDC,KAAK,EAAC,KAAK;MAACC,IAAI,EAAC;;wBAC7B,MAAmC,CAAnCP,YAAA,CAAmCQ,mBAAA;oBAAhBL,IAAA,CAAAC,QAAQ,CAACO,IAAI;mEAAbR,IAAA,CAAAC,QAAQ,CAACO,IAAI,GAAAD,MAAA;;;QAElCV,YAAA,CAEeK,uBAAA;MAFDC,KAAK,EAAC,KAAK;MAACC,IAAI,EAAC;;wBAC7B,MAAmC,CAAnCP,YAAA,CAAmCQ,mBAAA;oBAAhBL,IAAA,CAAAC,QAAQ,CAACQ,IAAI;mEAAbT,IAAA,CAAAC,QAAQ,CAACQ,IAAI,GAAAF,MAAA;;;QAElCV,YAAA,CAEeK,uBAAA;MAFDC,KAAK,EAAC,IAAI;MAACC,IAAI,EAAC;;wBAC5B,MAAgE,CAAhEP,YAAA,CAAgEQ,mBAAA;oBAA7CL,IAAA,CAAAC,QAAQ,CAACS,GAAG;mEAAZV,IAAA,CAAAC,QAAQ,CAACS,GAAG,GAAAH,MAAA;QAAEI,IAAI,EAAC,UAAU;QAAC,eAAa,EAAb;;;QAEnDd,YAAA,CAGeK,uBAAA;wBAFb,MAA8D,CAA9DL,YAAA,CAA8De,oBAAA;QAAnDD,IAAI,EAAC,SAAS;QAAEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAP,MAAA,IAAEQ,MAAA,CAAAC,UAAU;;0BAAI,MAAE,C,iBAAF,IAAE,E;;UAClDnB,YAAA,CAAoDe,oBAAA;QAAxCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAP,MAAA,IAAEQ,MAAA,CAAAE,SAAS;;0BAAU,MAAE,C,iBAAF,IAAE,E;;;;;;;;kEAhBRjB,IAAA,CAAAkB,MAAM,c,mBAoB5CvB,mBAAA,CAA4E,OAA5EwB,UAA4E,gC,SAA1BnB,IAAA,CAAAkB,MAAM,c"},"metadata":{},"sourceType":"module","externalDependencies":[]}