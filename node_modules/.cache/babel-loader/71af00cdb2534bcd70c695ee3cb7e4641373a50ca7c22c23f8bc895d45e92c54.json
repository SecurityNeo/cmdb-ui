{"ast":null,"code":"import axios from 'axios';\nimport { Base64 } from 'js-base64';\nimport { ElMessageBox } from 'element-plus';\n\n//创建公用axios配置\nlet instance = axios.create({\n  timeout: 1000,\n  responseType: \"json\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n\n// base64\nfunction b64Fun(accont) {\n  const base64 = Base64.encode(accont);\n  return base64;\n}\n\n// http拦截： axios请求发送之前给每一个接口携带Authorization\ninstance.interceptors.request.use(config => {\n  let token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = token;\n  }\n  return config;\n}, err => {\n  return Promise.reject(err);\n});\n\n// http拦截： axios请求发送之后\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    let ERRS = error.response.status;\n    let MSG = error.response.data.message;\n    let errdata = ERRS == 401 || ERRS == 400 ? MSG : '服务器内部错误';\n    switch (ERRS) {\n      case 401:\n        ElMessageBox.alert(errdata, '提示', {\n          confirmButtonText: '确认',\n          type: \"error\"\n        }).then(res => {\n          // 跳转至首页\n          window.location.href = '/';\n        }).catch(err => {\n          // 跳转至首页\n          window.location.href = '/';\n        });\n        break;\n    }\n  }\n  return Promise.reject(error.response.data);\n});\nexport default instance;","map":{"version":3,"names":["axios","Base64","ElMessageBox","instance","create","timeout","responseType","headers","b64Fun","accont","base64","encode","interceptors","request","use","config","token","localStorage","getItem","Authorization","err","Promise","reject","response","error","ERRS","status","MSG","data","message","errdata","alert","confirmButtonText","type","then","res","window","location","href","catch"],"sources":["D:/src/github.com/SecurityNeo/cmdb-ui/api/header.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Base64 } from 'js-base64'\r\nimport { ElMessageBox } from 'element-plus'\r\n\r\n//创建公用axios配置\r\nlet instance = axios.create({\r\n    timeout: 1000,\r\n    responseType: \"json\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n})\r\n\r\n\r\n// base64\r\nfunction b64Fun(accont) {\r\n    const base64 = Base64.encode(accont)\r\n    return  base64\r\n}\r\n\r\n// http拦截： axios请求发送之前给每一个接口携带Authorization\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        let token = localStorage.getItem('token')\r\n        if(token) {\r\n            config.headers.Authorization = token\r\n        }\r\n        return config\r\n    },\r\n    err => {\r\n        return Promise.reject(err)\r\n    }\r\n)\r\n\r\n// http拦截： axios请求发送之后\r\ninstance.interceptors.response.use(\r\n    response => {\r\n        return response\r\n    },\r\n    error => {\r\n        if(error.response){\r\n            let ERRS = error.response.status\r\n            let MSG = error.response.data.message\r\n            let errdata = ERRS == 401 || ERRS == 400 ? MSG : '服务器内部错误'\r\n            switch (ERRS) {\r\n                case 401:\r\n                    ElMessageBox.alert(errdata, '提示', {\r\n                        confirmButtonText: '确认',\r\n                        type: \"error\"\r\n                    })\r\n                    .then(res => {\r\n                        // 跳转至首页\r\n                        window.location.href = '/'\r\n                    })\r\n                    .catch(err => {\r\n                        // 跳转至首页\r\n                        window.location.href = '/'\r\n                    })\r\n                    break;\r\n            }\r\n        }\r\n        return Promise.reject(error.response.data)\r\n    }\r\n)\r\n\r\nexport default instance"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,YAAY,QAAQ,cAAc;;AAE3C;AACA,IAAIC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAAC;EACxBC,OAAO,EAAE,IAAI;EACbC,YAAY,EAAE,MAAM;EACpBC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAGF;AACA,SAASC,MAAMA,CAACC,MAAM,EAAE;EACpB,MAAMC,MAAM,GAAGT,MAAM,CAACU,MAAM,CAACF,MAAM,CAAC;EACpC,OAAQC,MAAM;AAClB;;AAEA;AACAP,QAAQ,CAACS,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACzC,IAAGF,KAAK,EAAE;IACND,MAAM,CAACR,OAAO,CAACY,aAAa,GAAGH,KAAK;EACxC;EACA,OAAOD,MAAM;AACjB,CAAC,EACDK,GAAG,IAAI;EACH,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;AAC9B,CACJ,CAAC;;AAED;AACAjB,QAAQ,CAACS,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BS,QAAQ,IAAI;EACR,OAAOA,QAAQ;AACnB,CAAC,EACDC,KAAK,IAAI;EACL,IAAGA,KAAK,CAACD,QAAQ,EAAC;IACd,IAAIE,IAAI,GAAGD,KAAK,CAACD,QAAQ,CAACG,MAAM;IAChC,IAAIC,GAAG,GAAGH,KAAK,CAACD,QAAQ,CAACK,IAAI,CAACC,OAAO;IACrC,IAAIC,OAAO,GAAGL,IAAI,IAAI,GAAG,IAAIA,IAAI,IAAI,GAAG,GAAGE,GAAG,GAAG,SAAS;IAC1D,QAAQF,IAAI;MACR,KAAK,GAAG;QACJvB,YAAY,CAAC6B,KAAK,CAACD,OAAO,EAAE,IAAI,EAAE;UAC9BE,iBAAiB,EAAE,IAAI;UACvBC,IAAI,EAAE;QACV,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAI;UACT;UACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;QAC9B,CAAC,CAAC,CACDC,KAAK,CAACnB,GAAG,IAAI;UACV;UACAgB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;QAC9B,CAAC,CAAC;QACF;IACR;EACJ;EACA,OAAOjB,OAAO,CAACC,MAAM,CAACE,KAAK,CAACD,QAAQ,CAACK,IAAI,CAAC;AAC9C,CACJ,CAAC;AAED,eAAezB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}